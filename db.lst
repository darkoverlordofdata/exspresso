--- parse(0, 9187, 0)
--- parse_token(7, T_OPEN_TAG, <?php )
--- parse_markup(T_OPEN_TAG, <?php )
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, defined)
--- parse_identifier(T_STRING, defined)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'BASEPATH')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'BASEPATH')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse_token(4, T_EXIT, exit)
--- parse_keyword(T_EXIT, exit)
--- parse_statement()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'No direct script access allowed')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'No direct script access allowed')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* CodeIgniter
*
* An open source application development framework for PHP 5.1.6 or newer
*
* @package		CodeIgniter
* @author		ExpressionEngine Dev Team
* @copyright	Copyright (c) 2008 - 2011, EllisLab, Inc.
* @license		http://codeigniter.com/user_guide/license.html
* @link		http://codeigniter.com
* @since		Version 1.0
* @filesource
*/)
--- parse_comment(T_DOC_COMMENT, /**
* CodeIgniter
*
* An open source application development framework for PHP 5.1.6 or newer
*
* @package		CodeIgniter
* @author		ExpressionEngine Dev Team
* @copyright	Copyright (c) 2008 - 2011, EllisLab, Inc.
* @license		http://codeigniter.com/user_guide/license.html
* @link		http://codeigniter.com
* @since		Version 1.0
* @filesource
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ------------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ------------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Active Record Class
*
* This is the platform-independent base Active Record implementation class.
*
* @package		CodeIgniter
* @subpackage	Drivers
* @category	Database
* @author		ExpressionEngine Dev Team
* @link		http://codeigniter.com/user_guide/database/
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Active Record Class
*
* This is the platform-independent base Active Record implementation class.
*
* @package		CodeIgniter
* @subpackage	Drivers
* @category	Database
* @author		ExpressionEngine Dev Team
* @link		http://codeigniter.com/user_guide/database/
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_CLASS, class)
--- parse_keyword(T_CLASS, class)
--- parse_class(class)
--- parse(37, 9179, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Active Record Caching variables)
--- parse_comment(T_COMMENT, // Active Record Caching variables)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_VAR, var)
--- parse_keyword(T_VAR, var)
--- parse_var()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Select
*
* Generates the SELECT portion of the query
*
* @access	public
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Select
*
* Generates the SELECT portion of the query
*
* @access	public
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '*')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '*')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(432, 578, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Set the global value if this was sepecified)
--- parse_comment(T_COMMENT, // Set the global value if this was sepecified)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_bool)
--- parse_identifier(T_STRING, is_bool)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(445, 454, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@_protect_identifiers = $escape
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_string)
--- parse_identifier(T_STRING, is_string)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(468, 481, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$select = explode(',', $select)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_block()
--- parse(496, 571, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(519, 569, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(545, 567, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_select)
--- parse_identifier(T_STRING, ar_cache_select)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'select')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'select')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					@ar_cache_select.push $val
					@ar_cache_exists.push 'select'
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_select.push $val
				
				if @ar_caching is true
					@ar_cache_select.push $val
					@ar_cache_exists.push 'select'
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$val = trim($val)
			
			if $val isnt ''
				@ar_select.push $val
				
				if @ar_caching is true
					@ar_cache_select.push $val
					@ar_cache_exists.push 'select'
					
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		#  Set the global value if this was sepecified
		if is_bool($escape)
			@_protect_identifiers = $escape
			
		
		if is_string($select)
			$select = explode(',', $select)
			
		
		for $val in $select
			$val = trim($val)
			
			if $val isnt ''
				@ar_select.push $val
				
				if @ar_caching is true
					@ar_cache_select.push $val
					@ar_cache_exists.push 'select'
					
				
			
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Select Max
*
* Generates a SELECT MAX(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Select Max
*
* Generates a SELECT MAX(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(606, 622, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _max_min_avg_sum)
--- parse_identifier(T_STRING, _max_min_avg_sum)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_max_min_avg_sum($select, $alias, 'MAX')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Select Min
*
* Generates a SELECT MIN(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Select Min
*
* Generates a SELECT MIN(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(650, 666, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _max_min_avg_sum)
--- parse_identifier(T_STRING, _max_min_avg_sum)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'MIN')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'MIN')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_max_min_avg_sum($select, $alias, 'MIN')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Select Average
*
* Generates a SELECT AVG(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Select Average
*
* Generates a SELECT AVG(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(694, 710, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _max_min_avg_sum)
--- parse_identifier(T_STRING, _max_min_avg_sum)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AVG')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AVG')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_max_min_avg_sum($select, $alias, 'AVG')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Select Sum
*
* Generates a SELECT SUM(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Select Sum
*
* Generates a SELECT SUM(field) portion of a query
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(738, 754, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _max_min_avg_sum)
--- parse_identifier(T_STRING, _max_min_avg_sum)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'SUM')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'SUM')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_max_min_avg_sum($select, $alias, 'SUM')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Processing Function for the four functions above:
*
*	select_max()
*	select_min()
*	select_avg()
*  select_sum()
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Processing Function for the four functions above:
*
*	select_max()
*	select_min()
*	select_avg()
*  select_sum()
*
* @access	public
* @param	string	the field
* @param	string	an alias
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_block()
--- parse(789, 983, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_string)
--- parse_identifier(T_STRING, is_string)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_LOGICAL_OR, OR)
--- parse_delimiter(T_LOGICAL_OR, OR)
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(811, 819, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_invalid_query')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_invalid_query')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@display_error('db_invalid_query')
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, strtoupper)
--- parse_identifier(T_STRING, strtoupper)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'MAX')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'MIN')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'MIN')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AVG')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AVG')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'SUM')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'SUM')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(862, 870, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_STRING, show_error)
--- parse_identifier(T_STRING, show_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'Invalid function type: ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'Invalid function type: ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			show_error('Invalid function type: ' + $type)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(885, 900, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _create_alias_from_table)
--- parse_identifier(T_STRING, _create_alias_from_table)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$alias = @_create_alias_from_table(trim($select))
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $select)
--- parse_identifier(T_VARIABLE, $select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ') AS ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ') AS ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $alias)
--- parse_identifier(T_VARIABLE, $alias)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(953, 975, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_select)
--- parse_identifier(T_STRING, ar_cache_select)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'select')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'select')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_cache_select.push $sql
			@ar_cache_exists.push 'select'
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_string($select) or $select is ''
			@display_error('db_invalid_query')
			
		
		$type = strtoupper($type)
		
		if not in_array($type, ['MAX', 'MIN', 'AVG', 'SUM'])
			show_error('Invalid function type: ' + $type)
			
		
		if $alias is ''
			$alias = @_create_alias_from_table(trim($select))
			
		
		$sql = $type + '(' + @_protect_identifiers(trim($select)) + ') AS ' + $alias
		
		@ar_select.push $sql
		
		if @ar_caching is true
			@ar_cache_select.push $sql
			@ar_cache_exists.push 'select'
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Determines the alias name based on the table
*
* @access	private
* @param	string
* @return	string
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Determines the alias name based on the table
*
* @access	private
* @param	string
* @return	string
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_block()
--- parse(1000, 1040, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strpos)
--- parse_identifier(T_STRING, strpos)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '.')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '.')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(1018, 1032, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, end)
--- parse_identifier(T_STRING, end)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '.')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '.')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return end(explode('.', $item))
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if strpos($item, '.') isnt false
			return end(explode('.', $item))
			
		
		return $item
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* DISTINCT
*
* Sets a flag which tells the query string compiler to add DISTINCT
*
* @access	public
* @param	bool
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* DISTINCT
*
* Sets a flag which tells the query string compiler to add DISTINCT
*
* @access	public
* @param	bool
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1061, 1088, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_distinct)
--- parse_identifier(T_STRING, ar_distinct)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, is_bool)
--- parse_identifier(T_STRING, is_bool)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@ar_distinct = if (is_bool($val)) then $val else true
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* From
*
* Generates the FROM portion of the query
*
* @access	public
* @param	mixed	can be a string or array
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* From
*
* Generates the FROM portion of the query
*
* @access	public
* @param	mixed	can be a string or array
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $from)
--- parse_identifier(T_VARIABLE, $from)
--- parse_block()
--- parse(1105, 1372, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(99, T_ARRAY_CAST, (array))
--- parse_token(2, T_VARIABLE, $from)
--- parse_identifier(T_VARIABLE, $from)
--- parse_block()
--- parse(1118, 1364, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strpos)
--- parse_identifier(T_STRING, strpos)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(1136, 1254, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1154, 1251, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1213, 1249, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_from)
--- parse_identifier(T_STRING, ar_cache_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'from')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'from')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

						@ar_cache_from.push @_protect_identifiers($v, true, null, false)
						@ar_cache_exists.push 'from'
						
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$v = trim($v)
					@_track_aliases($v)
					
					@ar_from.push @_protect_identifiers($v, true, null, false)
					
					if @ar_caching is true
						@ar_cache_from.push @_protect_identifiers($v, true, null, false)
						@ar_cache_exists.push 'from'
						
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				for $v in explode(',', $val)
					$v = trim($v)
					@_track_aliases($v)
					
					@ar_from.push @_protect_identifiers($v, true, null, false)
					
					if @ar_caching is true
						@ar_cache_from.push @_protect_identifiers($v, true, null, false)
						@ar_cache_exists.push 'from'
						
					
				
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(1260, 1362, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Extract any aliases that might exist.  We use this information)
--- parse_comment(T_COMMENT, // Extract any aliases that might exist.  We use this information)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // in the _protect_identifiers to know whether to add a table prefix)
--- parse_comment(T_COMMENT, // in the _protect_identifiers to know whether to add a table prefix)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1324, 1360, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_from)
--- parse_identifier(T_STRING, ar_cache_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'from')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'from')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					@ar_cache_from.push @_protect_identifiers($val, true, null, false)
					@ar_cache_exists.push 'from'
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$val = trim($val)
				
				#  Extract any aliases that might exist.  We use this information
				#  in the _protect_identifiers to know whether to add a table prefix
				@_track_aliases($val)
				
				@ar_from.push @_protect_identifiers($val, true, null, false)
				
				if @ar_caching is true
					@ar_cache_from.push @_protect_identifiers($val, true, null, false)
					@ar_cache_exists.push 'from'
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if strpos($val, ',') isnt false
				for $v in explode(',', $val)
					$v = trim($v)
					@_track_aliases($v)
					
					@ar_from.push @_protect_identifiers($v, true, null, false)
					
					if @ar_caching is true
						@ar_cache_from.push @_protect_identifiers($v, true, null, false)
						@ar_cache_exists.push 'from'
						
					
				
				
			else 
				$val = trim($val)
				
				#  Extract any aliases that might exist.  We use this information
				#  in the _protect_identifiers to know whether to add a table prefix
				@_track_aliases($val)
				
				@ar_from.push @_protect_identifiers($val, true, null, false)
				
				if @ar_caching is true
					@ar_cache_from.push @_protect_identifiers($val, true, null, false)
					@ar_cache_exists.push 'from'
					
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		for $val in $from
			if strpos($val, ',') isnt false
				for $v in explode(',', $val)
					$v = trim($v)
					@_track_aliases($v)
					
					@ar_from.push @_protect_identifiers($v, true, null, false)
					
					if @ar_caching is true
						@ar_cache_from.push @_protect_identifiers($v, true, null, false)
						@ar_cache_exists.push 'from'
						
					
				
				
			else 
				$val = trim($val)
				
				#  Extract any aliases that might exist.  We use this information
				#  in the _protect_identifiers to know whether to add a table prefix
				@_track_aliases($val)
				
				@ar_from.push @_protect_identifiers($val, true, null, false)
				
				if @ar_caching is true
					@ar_cache_from.push @_protect_identifiers($val, true, null, false)
					@ar_cache_exists.push 'from'
					
				
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Join
*
* Generates the JOIN portion of the query
*
* @access	public
* @param	string
* @param	string	the join condition
* @param	string	the type of join
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Join
*
* Generates the JOIN portion of the query
*
* @access	public
* @param	string
* @param	string	the join condition
* @param	string	the type of join
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $cond)
--- parse_identifier(T_VARIABLE, $cond)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(1399, 1664, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(1411, 1482, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, strtoupper)
--- parse_identifier(T_STRING, strtoupper)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'LEFT')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'LEFT')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'RIGHT')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'RIGHT')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OUTER')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OUTER')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'INNER')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'INNER')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'LEFT OUTER')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'LEFT OUTER')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'RIGHT OUTER')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'RIGHT OUTER')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1460, 1467, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$type = ''
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(1473, 1480, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$type+=' '
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$type = strtoupper(trim($type))
			
			if not in_array($type, ['LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER'])
				$type = ''
				
			else 
				$type+=' '
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Extract any aliases that might exist.  We use this information)
--- parse_comment(T_COMMENT, // Extract any aliases that might exist.  We use this information)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // in the _protect_identifiers to know whether to add a table prefix)
--- parse_comment(T_COMMENT, // in the _protect_identifiers to know whether to add a table prefix)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Strip apart the condition and protect the identifiers)
--- parse_comment(T_COMMENT, // Strip apart the condition and protect the identifiers)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, preg_match)
--- parse_identifier(T_STRING, preg_match)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '/([\w\.]+)([\W\s]+)(.+)/')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '/([\w\.]+)([\W\s]+)(.+)/')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $cond)
--- parse_identifier(T_VARIABLE, $cond)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1517, 1574, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 1)
--- parse_number(T_LNUMBER, 1)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 1)
--- parse_number(T_LNUMBER, 1)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 3)
--- parse_number(T_LNUMBER, 3)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 3)
--- parse_number(T_LNUMBER, 3)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $cond)
--- parse_identifier(T_VARIABLE, $cond)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 1)
--- parse_number(T_LNUMBER, 1)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 2)
--- parse_number(T_LNUMBER, 2)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 3)
--- parse_number(T_LNUMBER, 3)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$match[1] = @_protect_identifiers($match[1])
			$match[3] = @_protect_identifiers($match[3])
			
			$cond = $match[1] + $match[2] + $match[3]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Assemble the JOIN statement)
--- parse_comment(T_COMMENT, // Assemble the JOIN statement)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $join)
--- parse_identifier(T_VARIABLE, $join)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'JOIN ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'JOIN ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ON ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ON ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $cond)
--- parse_identifier(T_VARIABLE, $cond)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_join)
--- parse_identifier(T_STRING, ar_join)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $join)
--- parse_identifier(T_VARIABLE, $join)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1634, 1656, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_join)
--- parse_identifier(T_STRING, ar_cache_join)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $join)
--- parse_identifier(T_VARIABLE, $join)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'join')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'join')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_cache_join.push $join
			@ar_cache_exists.push 'join'
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $type isnt ''
			$type = strtoupper(trim($type))
			
			if not in_array($type, ['LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER'])
				$type = ''
				
			else 
				$type+=' '
				
			
		
		#  Extract any aliases that might exist.  We use this information
		#  in the _protect_identifiers to know whether to add a table prefix
		@_track_aliases($table)
		
		#  Strip apart the condition and protect the identifiers
		if preg_match('/([\w\.]+)([\W\s]+)(.+)/', $cond, $match)
			$match[1] = @_protect_identifiers($match[1])
			$match[3] = @_protect_identifiers($match[3])
			
			$cond = $match[1] + $match[2] + $match[3]
			
		
		#  Assemble the JOIN statement
		$join = $type + 'JOIN ' + @_protect_identifiers($table, true, null, false) + ' ON ' + $cond
		
		@ar_join.push $join
		if @ar_caching is true
			@ar_cache_join.push $join
			@ar_cache_exists.push 'join'
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where
*
* Generates the WHERE portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where
*
* Generates the WHERE portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1695, 1714, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where)
--- parse_identifier(T_STRING, _where)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where($key, $value, 'AND ', $escape)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* OR Where
*
* Generates the WHERE portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* OR Where
*
* Generates the WHERE portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1745, 1764, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where)
--- parse_identifier(T_STRING, _where)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where($key, $value, 'OR ', $escape)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where
*
* Called by where() or orwhere()
*
* @access	private
* @param	mixed
* @param	mixed
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where
*
* Called by where() or orwhere()
*
* @access	private
* @param	mixed
* @param	mixed
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(1802, 2132, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1816, 1830, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$key = $key:$value
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // If the escape value was not set will will base it on the global setting)
--- parse_comment(T_COMMENT, // If the escape value was not set will will base it on the global setting)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_bool)
--- parse_identifier(T_STRING, is_bool)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1849, 1858, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$escape = @_protect_identifiers
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_block()
--- parse(1877, 2124, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_LOGICAL_AND, AND)
--- parse_delimiter(T_LOGICAL_AND, AND)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_where)
--- parse_identifier(T_STRING, ar_cache_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_BOOLEAN_AND, &&)
--- parse_delimiter(T_BOOLEAN_AND, &&)
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _has_operator)
--- parse_identifier(T_STRING, _has_operator)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1939, 1948, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // value appears not to have been set, assign the test to IS NULL)
--- parse_comment(T_COMMENT, // value appears not to have been set, assign the test to IS NULL)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' IS NULL')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' IS NULL')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				#  value appears not to have been set, assign the test to IS NULL
				$k+=' IS NULL'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(1965, 2038, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(1977, 2010, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape)
--- parse_identifier(T_STRING, escape)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$k = @_protect_identifiers($k, false, $escape)
					
					$v = ' ' + @escape($v)
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _has_operator)
--- parse_identifier(T_STRING, _has_operator)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(2029, 2036, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' =')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' =')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$k+=' ='
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if $escape is true
					$k = @_protect_identifiers($k, false, $escape)
					
					$v = ' ' + @escape($v)
					
				
				if not @_has_operator($k)
					$k+=' ='
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(2044, 2062, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$k = @_protect_identifiers($k, false, $escape)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(2095, 2121, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_where)
--- parse_identifier(T_STRING, ar_cache_where)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'where')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_cache_where.push $prefix + $k + $v
				@ar_cache_exists.push 'where'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$prefix = if (count(@ar_where) is 0 and count(@ar_cache_where) is 0) then '' else $type
			
			if is_null($v) and  not @_has_operator($k)
				#  value appears not to have been set, assign the test to IS NULL
				$k+=' IS NULL'
				
			
			if not is_null($v)
				if $escape is true
					$k = @_protect_identifiers($k, false, $escape)
					
					$v = ' ' + @escape($v)
					
				
				if not @_has_operator($k)
					$k+=' ='
					
				
			else 
				$k = @_protect_identifiers($k, false, $escape)
				
			
			@ar_where.push $prefix + $k + $v
			
			if @ar_caching is true
				@ar_cache_where.push $prefix + $k + $v
				@ar_cache_exists.push 'where'
				
			
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_array($key)
			$key = $key:$value
			
		
		#  If the escape value was not set will will base it on the global setting
		if not is_bool($escape)
			$escape = @_protect_identifiers
			
		
		for $k, $v of $key
			$prefix = if (count(@ar_where) is 0 and count(@ar_cache_where) is 0) then '' else $type
			
			if is_null($v) and  not @_has_operator($k)
				#  value appears not to have been set, assign the test to IS NULL
				$k+=' IS NULL'
				
			
			if not is_null($v)
				if $escape is true
					$k = @_protect_identifiers($k, false, $escape)
					
					$v = ' ' + @escape($v)
					
				
				if not @_has_operator($k)
					$k+=' ='
					
				
			else 
				$k = @_protect_identifiers($k, false, $escape)
				
			
			@ar_where.push $prefix + $k + $v
			
			if @ar_caching is true
				@ar_cache_where.push $prefix + $k + $v
				@ar_cache_exists.push 'where'
				
			
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where_in
*
* Generates a WHERE field IN ('item', 'item') SQL query joined with
* AND if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where_in
*
* Generates a WHERE field IN ('item', 'item') SQL query joined with
* AND if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(2160, 2173, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where_in)
--- parse_identifier(T_STRING, _where_in)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where_in($key, $values)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where_in_or
*
* Generates a WHERE field IN ('item', 'item') SQL query joined with
* OR if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where_in_or
*
* Generates a WHERE field IN ('item', 'item') SQL query joined with
* OR if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(2201, 2220, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where_in)
--- parse_identifier(T_STRING, _where_in)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where_in($key, $values, false, 'OR ')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where_not_in
*
* Generates a WHERE field NOT IN ('item', 'item') SQL query joined
* with AND if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where_not_in
*
* Generates a WHERE field NOT IN ('item', 'item') SQL query joined
* with AND if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(2248, 2264, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where_in)
--- parse_identifier(T_STRING, _where_in)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where_in($key, $values, true)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where_not_in_or
*
* Generates a WHERE field NOT IN ('item', 'item') SQL query joined
* with OR if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where_not_in_or
*
* Generates a WHERE field NOT IN ('item', 'item') SQL query joined
* with OR if appropriate
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(2292, 2311, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _where_in)
--- parse_identifier(T_STRING, _where_in)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_where_in($key, $values, true, 'OR ')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Where_in
*
* Called by where_in, where_in_or, where_not_in, where_not_in_or
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @param	boolean	If the statement would be IN or NOT IN
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Where_in
*
* Called by where_in, where_in_or, where_not_in, where_not_in_or
*
* @access	public
* @param	string	The field to search
* @param	array	The values searched on
* @param	boolean	If the statement would be IN or NOT IN
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_block()
--- parse(2353, 2591, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, T_LOGICAL_OR, OR)
--- parse_delimiter(T_LOGICAL_OR, OR)
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(2373, 2376, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return 
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(2393, 2403, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$values = [$values]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' NOT')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' NOT')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $values)
--- parse_identifier(T_VARIABLE, $values)
--- parse_block()
--- parse(2436, 2452, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_wherein)
--- parse_identifier(T_STRING, ar_wherein)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape)
--- parse_identifier(T_STRING, escape)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_wherein.push @escape($value)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $where_in)
--- parse_identifier(T_VARIABLE, $where_in)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, " IN (")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, " IN (")
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ", ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ", ")
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_wherein)
--- parse_identifier(T_STRING, ar_wherein)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ") ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ") ")
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $where_in)
--- parse_identifier(T_VARIABLE, $where_in)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(2548, 2570, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_where)
--- parse_identifier(T_STRING, ar_cache_where)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $where_in)
--- parse_identifier(T_VARIABLE, $where_in)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'where')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_cache_where.push $where_in
			@ar_cache_exists.push 'where'
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // reset the array for multiple calls)
--- parse_comment(T_COMMENT, // reset the array for multiple calls)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_wherein)
--- parse_identifier(T_STRING, ar_wherein)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $key is null or $values is null
			return 
			
		
		if not is_array($values)
			$values = [$values]
			
		
		$not = if ($not) then ' NOT' else ''
		
		for $value in $values
			@ar_wherein.push @escape($value)
			
		
		$prefix = if (count(@ar_where) is 0) then '' else $type
		
		$where_in = $prefix + @_protect_identifiers($key) + $not + " IN (" + implode(", ", @ar_wherein) + ") "
		
		@ar_where.push $where_in
		if @ar_caching is true
			@ar_cache_where.push $where_in
			@ar_cache_exists.push 'where'
			
		
		#  reset the array for multiple calls
		@ar_wherein = {}
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Like
*
* Generates a %LIKE% portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Like
*
* Generates a %LIKE% portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_block()
--- parse(2622, 2641, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like)
--- parse_identifier(T_STRING, _like)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_like($field, $match, 'AND ', $side)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Not Like
*
* Generates a NOT LIKE portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Not Like
*
* Generates a NOT LIKE portion of the query. Separates
* multiple calls with AND
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_block()
--- parse(2672, 2694, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like)
--- parse_identifier(T_STRING, _like)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'NOT')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'NOT')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_like($field, $match, 'AND ', $side, 'NOT')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* OR Like
*
* Generates a %LIKE% portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* OR Like
*
* Generates a %LIKE% portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_block()
--- parse(2725, 2744, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like)
--- parse_identifier(T_STRING, _like)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_like($field, $match, 'OR ', $side)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* OR Not Like
*
* Generates a NOT LIKE portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* OR Not Like
*
* Generates a NOT LIKE portion of the query. Separates
* multiple calls with OR
*
* @access	public
* @param	mixed
* @param	mixed
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_block()
--- parse(2775, 2797, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like)
--- parse_identifier(T_STRING, _like)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'NOT')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'NOT')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_like($field, $match, 'OR ', $side, 'NOT')
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Like
*
* Called by like() or orlike()
*
* @access	private
* @param	mixed
* @param	mixed
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Like
*
* Called by like() or orlike()
*
* @access	private
* @param	mixed
* @param	mixed
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'both')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(2842, 3101, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(2856, 2870, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_VARIABLE, $match)
--- parse_identifier(T_VARIABLE, $match)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$field = $field:$match
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $field)
--- parse_identifier(T_VARIABLE, $field)
--- parse_block()
--- parse(2889, 3094, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape_like_str)
--- parse_identifier(T_STRING, escape_like_str)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'before')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'before')
--- parse_block()
--- parse(2954, 2963, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, ", " $k $not LIKE '%{$v}'")
--- parse_string(", " $k $not LIKE '%{$v}'")
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$like_statement = $prefix + " $k $not LIKE '%{$v}'"
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_if(else)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $side)
--- parse_identifier(T_VARIABLE, $side)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'after')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'after')
--- parse_block()
--- parse(2979, 2988, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, ", " $k $not LIKE '{$v}%'")
--- parse_string(", " $k $not LIKE '{$v}%'")
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$like_statement = $prefix + " $k $not LIKE '{$v}%'"
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(2994, 3003, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, ", " $k $not LIKE '%{$v}%'")
--- parse_string(", " $k $not LIKE '%{$v}%'")
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$like_statement = $prefix + " $k $not LIKE '%{$v}%'"
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // some platforms require an escape sequence definition for LIKE wildcards)
--- parse_comment(T_COMMENT, // some platforms require an escape sequence definition for LIKE wildcards)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like_escape_str)
--- parse_identifier(T_STRING, _like_escape_str)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3022, 3041, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_STRING, sprintf)
--- parse_identifier(T_STRING, sprintf)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like_escape_str)
--- parse_identifier(T_STRING, _like_escape_str)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _like_escape_chr)
--- parse_identifier(T_STRING, _like_escape_chr)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$like_statement = $like_statement + sprintf(@_like_escape_str, @_like_escape_chr)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3069, 3091, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_like)
--- parse_identifier(T_STRING, ar_cache_like)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $like_statement)
--- parse_identifier(T_VARIABLE, $like_statement)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'like')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'like')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_cache_like.push $like_statement
				@ar_cache_exists.push 'like'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$k = @_protect_identifiers($k)
			
			$prefix = if (count(@ar_like) is 0) then '' else $type
			
			$v = @escape_like_str($v)
			
			if $side is 'before'
				$like_statement = $prefix + " $k $not LIKE '%{$v}'"
				
			else if $side is 'after'
				$like_statement = $prefix + " $k $not LIKE '{$v}%'"
				
			else 
				$like_statement = $prefix + " $k $not LIKE '%{$v}%'"
				
			
			#  some platforms require an escape sequence definition for LIKE wildcards
			if @_like_escape_str isnt ''
				$like_statement = $like_statement + sprintf(@_like_escape_str, @_like_escape_chr)
				
			
			@ar_like.push $like_statement
			if @ar_caching is true
				@ar_cache_like.push $like_statement
				@ar_cache_exists.push 'like'
				
			
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_array($field)
			$field = $field:$match
			
		
		for $k, $v of $field
			$k = @_protect_identifiers($k)
			
			$prefix = if (count(@ar_like) is 0) then '' else $type
			
			$v = @escape_like_str($v)
			
			if $side is 'before'
				$like_statement = $prefix + " $k $not LIKE '%{$v}'"
				
			else if $side is 'after'
				$like_statement = $prefix + " $k $not LIKE '{$v}%'"
				
			else 
				$like_statement = $prefix + " $k $not LIKE '%{$v}%'"
				
			
			#  some platforms require an escape sequence definition for LIKE wildcards
			if @_like_escape_str isnt ''
				$like_statement = $like_statement + sprintf(@_like_escape_str, @_like_escape_chr)
				
			
			@ar_like.push $like_statement
			if @ar_caching is true
				@ar_cache_like.push $like_statement
				@ar_cache_exists.push 'like'
				
			
			
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* GROUP BY
*
* @access	public
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* GROUP BY
*
* @access	public
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $by)
--- parse_identifier(T_VARIABLE, $by)
--- parse_block()
--- parse(3118, 3249, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_string)
--- parse_identifier(T_STRING, is_string)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $by)
--- parse_identifier(T_VARIABLE, $by)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(3129, 3142, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $by)
--- parse_identifier(T_VARIABLE, $by)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $by)
--- parse_identifier(T_VARIABLE, $by)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$by = explode(',', $by)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $by)
--- parse_identifier(T_VARIABLE, $by)
--- parse_block()
--- parse(3157, 3242, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3180, 3240, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_groupby)
--- parse_identifier(T_STRING, ar_groupby)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3211, 3238, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_groupby)
--- parse_identifier(T_STRING, ar_cache_groupby)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'groupby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'groupby')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					@ar_cache_groupby.push @_protect_identifiers($val)
					@ar_cache_exists.push 'groupby'
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_groupby.push @_protect_identifiers($val)
				
				if @ar_caching is true
					@ar_cache_groupby.push @_protect_identifiers($val)
					@ar_cache_exists.push 'groupby'
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$val = trim($val)
			
			if $val isnt ''
				@ar_groupby.push @_protect_identifiers($val)
				
				if @ar_caching is true
					@ar_cache_groupby.push @_protect_identifiers($val)
					@ar_cache_exists.push 'groupby'
					
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if is_string($by)
			$by = explode(',', $by)
			
		
		for $val in $by
			$val = trim($val)
			
			if $val isnt ''
				@ar_groupby.push @_protect_identifiers($val)
				
				if @ar_caching is true
					@ar_cache_groupby.push @_protect_identifiers($val)
					@ar_cache_exists.push 'groupby'
					
				
			
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the HAVING value
*
* Separates multiple calls with AND
*
* @access	public
* @param	string
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the HAVING value
*
* Separates multiple calls with AND
*
* @access	public
* @param	string
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3280, 3299, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _having)
--- parse_identifier(T_STRING, _having)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_having($key, $value, 'AND ', $escape)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the OR HAVING value
*
* Separates multiple calls with OR
*
* @access	public
* @param	string
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the OR HAVING value
*
* Separates multiple calls with OR
*
* @access	public
* @param	string
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3330, 3349, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _having)
--- parse_identifier(T_STRING, _having)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'OR ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		return @_having($key, $value, 'OR ', $escape)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the HAVING values
*
* Called by having() or or_having()
*
* @access	private
* @param	string
* @param	string
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the HAVING values
*
* Called by having() or or_having()
*
* @access	private
* @param	string
* @param	string
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'AND ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3387, 3608, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(3401, 3415, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$key = $key:$value
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_block()
--- parse(3434, 3600, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_having)
--- parse_identifier(T_STRING, ar_having)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(2, T_VARIABLE, $type)
--- parse_identifier(T_VARIABLE, $type)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3473, 3485, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$k = @_protect_identifiers($k)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _has_operator)
--- parse_identifier(T_STRING, _has_operator)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(3504, 3511, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' = ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' = ')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$k+=' = '
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3526, 3540, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape_str)
--- parse_identifier(T_STRING, escape_str)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$v = ' ' + @escape_str($v)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_having)
--- parse_identifier(T_STRING, ar_having)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3572, 3598, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_having)
--- parse_identifier(T_STRING, ar_cache_having)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $prefix)
--- parse_identifier(T_VARIABLE, $prefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'having')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'having')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_cache_having.push $prefix + $k + $v
				@ar_cache_exists.push 'having'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$prefix = if (count(@ar_having) is 0) then '' else $type
			
			if $escape is true
				$k = @_protect_identifiers($k)
				
			
			if not @_has_operator($k)
				$k+=' = '
				
			
			if $v isnt ''
				$v = ' ' + @escape_str($v)
				
			
			@ar_having.push $prefix + $k + $v
			if @ar_caching is true
				@ar_cache_having.push $prefix + $k + $v
				@ar_cache_exists.push 'having'
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_array($key)
			$key = $key:$value
			
		
		for $k, $v of $key
			$prefix = if (count(@ar_having) is 0) then '' else $type
			
			if $escape is true
				$k = @_protect_identifiers($k)
				
			
			if not @_has_operator($k)
				$k+=' = '
				
			
			if $v isnt ''
				$v = ' ' + @escape_str($v)
				
			
			@ar_having.push $prefix + $k + $v
			if @ar_caching is true
				@ar_cache_having.push $prefix + $k + $v
				@ar_cache_exists.push 'having'
				
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the ORDER BY value
*
* @access	public
* @param	string
* @param	string	direction: asc or desc
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the ORDER BY value
*
* @access	public
* @param	string
* @param	string	direction: asc or desc
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3632, 3941, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strtolower)
--- parse_identifier(T_STRING, strtolower)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'random')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'random')
--- parse_block()
--- parse(3647, 3665, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(6, T_COMMENT, // Random results want or don't need a field name)
--- parse_comment(T_COMMENT, // Random results want or don't need a field name)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _random_keyword)
--- parse_identifier(T_STRING, _random_keyword)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$orderby = ''#  Random results want or don't need a field name
			$direction = @_random_keyword
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSEIF, elseif)
--- parse_keyword(T_ELSEIF, elseif)
--- parse_if(elseif)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3682, 3722, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, strtoupper)
--- parse_identifier(T_STRING, strtoupper)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ASC')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ASC')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'DESC')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'DESC')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ASC')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ASC')
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$direction = if (in_array(strtoupper(trim($direction)), ['ASC', 'DESC'], true)) then ' ' + $direction else ' ASC'
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strpos)
--- parse_identifier(T_STRING, strpos)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(3744, 3843, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $temp)
--- parse_identifier(T_VARIABLE, $temp)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(3771, 3827, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_aliased_tables)
--- parse_identifier(T_STRING, ar_aliased_tables)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(3800, 3815, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$part = @_protect_identifiers(trim($part))
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $temp)
--- parse_identifier(T_VARIABLE, $temp)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $part)
--- parse_identifier(T_VARIABLE, $part)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$part = trim($part)
				if not in_array($part, @ar_aliased_tables)
					$part = @_protect_identifiers(trim($part))
					
				
				$temp.push $part
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $temp)
--- parse_identifier(T_VARIABLE, $temp)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$temp = {}
			for $part in explode(',', $orderby)
				$part = trim($part)
				if not in_array($part, @ar_aliased_tables)
					$part = @_protect_identifiers(trim($part))
					
				
				$temp.push $part
				
			
			$orderby = implode(', ', $temp)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_if(else)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _random_keyword)
--- parse_identifier(T_STRING, _random_keyword)
--- parse_block()
--- parse(3861, 3873, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$orderby = @_protect_identifiers($orderby)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $orderby_statement)
--- parse_identifier(T_VARIABLE, $orderby_statement)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $orderby)
--- parse_identifier(T_VARIABLE, $orderby)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $direction)
--- parse_identifier(T_VARIABLE, $direction)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_orderby)
--- parse_identifier(T_STRING, ar_orderby)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $orderby_statement)
--- parse_identifier(T_VARIABLE, $orderby_statement)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(3911, 3933, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_orderby)
--- parse_identifier(T_STRING, ar_cache_orderby)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $orderby_statement)
--- parse_identifier(T_VARIABLE, $orderby_statement)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'orderby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'orderby')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_cache_orderby.push $orderby_statement
			@ar_cache_exists.push 'orderby'
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if strtolower($direction) is 'random'
			$orderby = ''#  Random results want or don't need a field name
			$direction = @_random_keyword
			
		else if trim($direction) isnt ''
			$direction = if (in_array(strtoupper(trim($direction)), ['ASC', 'DESC'], true)) then ' ' + $direction else ' ASC'
			
		
		
		if strpos($orderby, ',') isnt false
			$temp = {}
			for $part in explode(',', $orderby)
				$part = trim($part)
				if not in_array($part, @ar_aliased_tables)
					$part = @_protect_identifiers(trim($part))
					
				
				$temp.push $part
				
			
			$orderby = implode(', ', $temp)
			
		else if $direction isnt @_random_keyword
			$orderby = @_protect_identifiers($orderby)
			
		
		$orderby_statement = $orderby + $direction
		
		@ar_orderby.push $orderby_statement
		if @ar_caching is true
			@ar_cache_orderby.push $orderby_statement
			@ar_cache_exists.push 'orderby'
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the LIMIT value
*
* @access	public
* @param	integer	the limit value
* @param	integer	the offset value
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the LIMIT value
*
* @access	public
* @param	integer	the limit value
* @param	integer	the offset value
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3965, 4004, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_limit)
--- parse_identifier(T_STRING, ar_limit)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(3987, 3996, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_offset)
--- parse_identifier(T_STRING, ar_offset)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_offset = $offset
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@ar_limit = $value
		
		if $offset isnt ''
			@ar_offset = $offset
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Sets the OFFSET value
*
* @access	public
* @param	integer	the offset value
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Sets the OFFSET value
*
* @access	public
* @param	integer	the offset value
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_block()
--- parse(4021, 4035, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_offset)
--- parse_identifier(T_STRING, ar_offset)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@ar_offset = $offset
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* The "set" function.  Allows key/value pairs to be set for inserting or updating
*
* @access	public
* @param	mixed
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* The "set" function.  Allows key/value pairs to be set for inserting or updating
*
* @access	public
* @param	mixed
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(4066, 4199, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _object_to_array)
--- parse_identifier(T_STRING, _object_to_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4093, 4107, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$key = $key:$value
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_block()
--- parse(4126, 4191, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(4138, 4155, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_set[@_protect_identifiers($k)] = $v
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(4161, 4189, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape)
--- parse_identifier(T_STRING, escape)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_set[@_protect_identifiers($k, false, true)] = @escape($v)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if $escape is false
				@ar_set[@_protect_identifiers($k)] = $v
				
			else 
				@ar_set[@_protect_identifiers($k, false, true)] = @escape($v)
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		$key = @_object_to_array($key)
		
		if not is_array($key)
			$key = $key:$value
			
		
		for $k, $v of $key
			if $escape is false
				@ar_set[@_protect_identifiers($k)] = $v
				
			else 
				@ar_set[@_protect_identifiers($k, false, true)] = @escape($v)
				
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Get
*
* Compiles the select statement based on the other functions called
* and runs the query
*
* @access	public
* @param	string	the table
* @param	string	the limit clause
* @param	string	the offset clause
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Get
*
* Compiles the select statement based on the other functions called
* and runs the query
*
* @access	public
* @param	string	the table
* @param	string	the limit clause
* @param	string	the offset clause
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, null)
--- parse_identifier(T_STRING, null)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, null)
--- parse_identifier(T_STRING, null)
--- parse_block()
--- parse(4234, 4329, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(4246, 4262, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, from)
--- parse_identifier(T_STRING, from)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@_track_aliases($table)
			@from($table)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4279, 4290, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, limit)
--- parse_identifier(T_STRING, limit)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@limit($limit, $offset)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _compile_select)
--- parse_identifier(T_STRING, _compile_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $result)
--- parse_identifier(T_VARIABLE, $result)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_select)
--- parse_identifier(T_STRING, _reset_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $result)
--- parse_identifier(T_VARIABLE, $result)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table isnt ''
			@_track_aliases($table)
			@from($table)
			
		
		if not is_null($limit)
			@limit($limit, $offset)
			
		
		$sql = @_compile_select()
		
		$result = @query($sql)
		@_reset_select()
		return $result
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* "Count All Results" query
*
* Generates a platform-specific query string that counts all records
* returned by an Active Record query.
*
* @access	public
* @param	string
* @return	string
*/)
--- parse_comment(T_DOC_COMMENT, /**
* "Count All Results" query
*
* Generates a platform-specific query string that counts all records
* returned by an Active Record query.
*
* @access	public
* @param	string
* @return	string
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(4347, 4466, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(4359, 4375, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, from)
--- parse_identifier(T_STRING, from)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@_track_aliases($table)
			@from($table)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _compile_select)
--- parse_identifier(T_STRING, _compile_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _count_string)
--- parse_identifier(T_STRING, _count_string)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'numrows')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'numrows')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $query)
--- parse_identifier(T_VARIABLE, $query)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_select)
--- parse_identifier(T_STRING, _reset_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $query)
--- parse_identifier(T_VARIABLE, $query)
--- parse_token(1, T_OBJECT_OPERATOR, ->)
--- parse_delimiter(T_OBJECT_OPERATOR, ->)
--- parse_token(2, T_STRING, num_rows)
--- parse_identifier(T_STRING, num_rows)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(4438, 4443, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return 0
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $query)
--- parse_identifier(T_VARIABLE, $query)
--- parse_token(1, T_OBJECT_OPERATOR, ->)
--- parse_delimiter(T_OBJECT_OPERATOR, ->)
--- parse_token(2, T_STRING, row)
--- parse_identifier(T_STRING, row)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(99, T_INT_CAST, (int))
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, T_OBJECT_OPERATOR, ->)
--- parse_delimiter(T_OBJECT_OPERATOR, ->)
--- parse_token(2, T_STRING, numrows)
--- parse_identifier(T_STRING, numrows)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table isnt ''
			@_track_aliases($table)
			@from($table)
			
		
		$sql = @_compile_select(@_count_string + @_protect_identifiers('numrows'))
		
		$query = @query($sql)
		@_reset_select()
		
		if $query.num_rows() is 0
			return 0
			
		
		$row = $query.row()
		return $row.numrows
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Get_Where
*
* Allows the where clause, limit and offset to be added directly
*
* @access	public
* @param	string	the where clause
* @param	string	the limit clause
* @param	string	the offset clause
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Get_Where
*
* Allows the where clause, limit and offset to be added directly
*
* @access	public
* @param	string	the where clause
* @param	string	the limit clause
* @param	string	the offset clause
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, null)
--- parse_identifier(T_STRING, null)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, null)
--- parse_identifier(T_STRING, null)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, null)
--- parse_identifier(T_STRING, null)
--- parse_block()
--- parse(4508, 4620, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(4520, 4528, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, from)
--- parse_identifier(T_STRING, from)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@from($table)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4545, 4553, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, where)
--- parse_identifier(T_STRING, where)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@where($where)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4570, 4581, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, limit)
--- parse_identifier(T_STRING, limit)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $offset)
--- parse_identifier(T_VARIABLE, $offset)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@limit($limit, $offset)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _compile_select)
--- parse_identifier(T_STRING, _compile_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $result)
--- parse_identifier(T_VARIABLE, $result)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_select)
--- parse_identifier(T_STRING, _reset_select)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $result)
--- parse_identifier(T_VARIABLE, $result)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table isnt ''
			@from($table)
			
		
		if not is_null($where)
			@where($where)
			
		
		if not is_null($limit)
			@limit($limit, $offset)
			
		
		$sql = @_compile_select()
		
		$result = @query($sql)
		@_reset_select()
		return $result
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Insert_Batch
*
* Compiles batch insert strings and runs the queries
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of insert values
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Insert_Batch
*
* Compiles batch insert strings and runs the queries
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of insert values
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(4648, 4917, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4662, 4670, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, set_insert_batch)
--- parse_identifier(T_STRING, set_insert_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@set_insert_batch($set)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(4690, 4719, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(4700, 4712, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, //No valid data array.  Folds in cases where keys and values did not match up)
--- parse_comment(T_COMMENT, //No valid data array.  Folds in cases where keys and values did not match up)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				# No valid data array.  Folds in cases where keys and values did not match up
				return @display_error('db_must_use_set')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				# No valid data array.  Folds in cases where keys and values did not match up
				return @display_error('db_must_use_set')
				
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(4734, 4795, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(4753, 4780, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(4763, 4773, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Batch this baby)
--- parse_comment(T_COMMENT, // Batch this baby)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOR, for)
--- parse_keyword(T_FOR, for)
--- parse_for(for)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(2, T_VARIABLE, $total)
--- parse_identifier(T_VARIABLE, $total)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, <, )
--- parse_delimiter(<, )
--- parse_token(2, T_VARIABLE, $total)
--- parse_identifier(T_VARIABLE, $total)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, +, )
--- parse_delimiter(+, )
--- parse_token(3, T_LNUMBER, 100)
--- parse_number(T_LNUMBER, 100)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, {, )
--- parse_delimiter({, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _insert_batch)
--- parse_identifier(T_STRING, _insert_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_keys)
--- parse_identifier(T_STRING, ar_keys)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_slice)
--- parse_identifier(T_STRING, array_slice)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(3, T_LNUMBER, 100)
--- parse_number(T_LNUMBER, 100)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, //echo $sql;)
--- parse_comment(T_COMMENT, //echo $sql;)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, }, )
--- parse_delimiter(}, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_null($set)
			@set_insert_batch($set)
			
		
		if count(@ar_set) is 0
			if @db_debug
				# No valid data array.  Folds in cases where keys and values did not match up
				return @display_error('db_must_use_set')
				
			return false
			
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		
		#  Batch this baby
		($i = 0,$total = count(@ar_set)$i < $total$i = $i + 100)
		{
		
		$sql = @_insert_batch(@_protect_identifiers($table, true, null, false), @ar_keys, array_slice(@ar_set, $i, 100))
		
		# echo $sql;
		
		@query($sql)
		}
		
		@_reset_write()
		
		
		return true
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* The "set_insert_batch" function.  Allows key/value pairs to be set for batch inserts
*
* @access	public
* @param	mixed
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* The "set_insert_batch" function.  Allows key/value pairs to be set for batch inserts
*
* @access	public
* @param	mixed
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(4949, 5241, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _object_to_array_batch)
--- parse_identifier(T_STRING, _object_to_array_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(4976, 4990, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$key = $key:$value
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $keys)
--- parse_identifier(T_VARIABLE, $keys)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, current)
--- parse_identifier(T_STRING, current)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_STRING, sort)
--- parse_identifier(T_STRING, sort)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $keys)
--- parse_identifier(T_VARIABLE, $keys)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_block()
--- parse(5025, 5202, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, array_diff)
--- parse_identifier(T_STRING, array_diff)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $keys)
--- parse_identifier(T_VARIABLE, $keys)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_LOGICAL_OR, OR)
--- parse_delimiter(T_LOGICAL_OR, OR)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, array_diff)
--- parse_identifier(T_STRING, array_diff)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $keys)
--- parse_identifier(T_VARIABLE, $keys)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(5069, 5087, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // batch function above returns an error on an empty array)
--- parse_comment(T_COMMENT, // batch function above returns an error on an empty array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				#  batch function above returns an error on an empty array
				@ar_set.push {}
				return 
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_STRING, ksort)
--- parse_identifier(T_STRING, ksort)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(6, T_COMMENT, // puts $row in the same order as our keys)
--- parse_comment(T_COMMENT, // puts $row in the same order as our keys)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(5111, 5133, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ')')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ')')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_set.push '(' + implode(',', $row) + ')'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(5139, 5200, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $row)
--- parse_identifier(T_VARIABLE, $row)
--- parse_block()
--- parse(5161, 5175, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape)
--- parse_identifier(T_STRING, escape)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $value)
--- parse_identifier(T_VARIABLE, $value)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$clean.push @escape($value)
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '(')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ')')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ')')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$clean = {}
				
				for $value in $row
					$clean.push @escape($value)
					
				
				@ar_set.push '(' + implode(',', $clean) + ')'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if count(array_diff($keys, array_keys($row))) > 0 or count(array_diff(array_keys($row), $keys)) > 0
				#  batch function above returns an error on an empty array
				@ar_set.push {}
				return 
				
			
			ksort($row)#  puts $row in the same order as our keys
			
			if $escape is false
				@ar_set.push '(' + implode(',', $row) + ')'
				
			else 
				$clean = {}
				
				for $value in $row
					$clean.push @escape($value)
					
				
				@ar_set.push '(' + implode(',', $clean) + ')'
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $keys)
--- parse_identifier(T_VARIABLE, $keys)
--- parse_block()
--- parse(5217, 5233, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_keys)
--- parse_identifier(T_STRING, ar_keys)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@ar_keys.push @_protect_identifiers($k)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		$key = @_object_to_array_batch($key)
		
		if not is_array($key)
			$key = $key:$value
			
		
		$keys = array_keys(current($key))
		sort($keys)
		
		for $row in $key
			if count(array_diff($keys, array_keys($row))) > 0 or count(array_diff(array_keys($row), $keys)) > 0
				#  batch function above returns an error on an empty array
				@ar_set.push {}
				return 
				
			
			ksort($row)#  puts $row in the same order as our keys
			
			if $escape is false
				@ar_set.push '(' + implode(',', $row) + ')'
				
			else 
				$clean = {}
				
				for $value in $row
					$clean.push @escape($value)
					
				
				@ar_set.push '(' + implode(',', $clean) + ')'
				
			
		
		for $k in $keys
			@ar_keys.push @_protect_identifiers($k)
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Insert
*
* Compiles an insert string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of insert values
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Insert
*
* Compiles an insert string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of insert values
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(5269, 5477, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(5283, 5291, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, set)
--- parse_identifier(T_STRING, set)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@set($set)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(5311, 5338, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5321, 5331, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_must_use_set')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(5353, 5414, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(5372, 5399, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5382, 5392, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _insert)
--- parse_identifier(T_STRING, _insert)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_values)
--- parse_identifier(T_STRING, array_values)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_null($set)
			@set($set)
			
		
		if count(@ar_set) is 0
			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		
		$sql = @_insert(@_protect_identifiers($table, true, null, false), array_keys(@ar_set), array_values(@ar_set))
		
		@_reset_write()
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(5500, 5708, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(5514, 5522, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, set)
--- parse_identifier(T_STRING, set)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@set($set)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(5542, 5569, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5552, 5562, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_must_use_set')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(5584, 5645, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(5603, 5630, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5613, 5623, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _replace)
--- parse_identifier(T_STRING, _replace)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_values)
--- parse_identifier(T_STRING, array_values)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_null($set)
			@set($set)
			
		
		if count(@ar_set) is 0
			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		
		$sql = @_replace(@_protect_identifiers($table, true, null, false), array_keys(@ar_set), array_values(@ar_set))
		
		@_reset_write()
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Update
*
* Compiles an update string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of update values
* @param	mixed	the where clause
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Update
*
* Compiles an update string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of update values
* @param	mixed	the where clause
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(5750, 6018, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Combine any cached components with the current statements)
--- parse_comment(T_COMMENT, // Combine any cached components with the current statements)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _merge_cache)
--- parse_identifier(T_STRING, _merge_cache)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(5774, 5782, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, set)
--- parse_identifier(T_STRING, set)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@set($set)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(5802, 5829, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5812, 5822, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_must_use_set')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(5844, 5905, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(5863, 5890, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(5873, 5883, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(5920, 5928, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, where)
--- parse_identifier(T_STRING, where)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@where($where)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(5943, 5951, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, limit)
--- parse_identifier(T_STRING, limit)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@limit($limit)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _update)
--- parse_identifier(T_STRING, _update)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_orderby)
--- parse_identifier(T_STRING, ar_orderby)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_limit)
--- parse_identifier(T_STRING, ar_limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		#  Combine any cached components with the current statements
		@_merge_cache()
		
		if not is_null($set)
			@set($set)
			
		
		if count(@ar_set) is 0
			if @db_debug
				return @display_error('db_must_use_set')
				
			return false
			
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		
		if $where isnt null
			@where($where)
			
		
		if $limit isnt null
			@limit($limit)
			
		
		$sql = @_update(@_protect_identifiers($table, true, null, false), @ar_set, @ar_where, @ar_orderby, @ar_limit)
		
		@_reset_write()
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Update_Batch
*
* Compiles an update string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of update values
* @param	string	the where key
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Update_Batch
*
* Compiles an update string and runs the query
*
* @access	public
* @param	string	the table to retrieve the results from
* @param	array	an associative array of update values
* @param	string	the where key
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(6054, 6374, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Combine any cached components with the current statements)
--- parse_comment(T_COMMENT, // Combine any cached components with the current statements)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _merge_cache)
--- parse_identifier(T_STRING, _merge_cache)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(6075, 6103, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(6085, 6095, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_myst_use_index')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_myst_use_index')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_myst_use_index')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_myst_use_index')
				
			
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_null)
--- parse_identifier(T_STRING, is_null)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(6120, 6131, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, set_update_batch)
--- parse_identifier(T_STRING, set_update_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $set)
--- parse_identifier(T_VARIABLE, $set)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@set_update_batch($set, $index)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(6151, 6179, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(6161, 6171, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_use_set')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_must_use_set')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_must_use_set')
				
			
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(6194, 6255, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(6213, 6240, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(6223, 6233, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Batch this baby)
--- parse_comment(T_COMMENT, // Batch this baby)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOR, for)
--- parse_keyword(T_FOR, for)
--- parse_for(for)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(2, T_VARIABLE, $total)
--- parse_identifier(T_VARIABLE, $total)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, <, )
--- parse_delimiter(<, )
--- parse_token(2, T_VARIABLE, $total)
--- parse_identifier(T_VARIABLE, $total)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, +, )
--- parse_delimiter(+, )
--- parse_token(3, T_LNUMBER, 100)
--- parse_number(T_LNUMBER, 100)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, {, )
--- parse_delimiter({, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _update_batch)
--- parse_identifier(T_STRING, _update_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, array_slice)
--- parse_identifier(T_STRING, array_slice)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(3, T_LNUMBER, 100)
--- parse_number(T_LNUMBER, 100)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, }, )
--- parse_delimiter(}, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		#  Combine any cached components with the current statements
		@_merge_cache()
		
		if is_null($index)
			if @db_debug
				return @display_error('db_myst_use_index')
				
			
			return false
			
		
		if not is_null($set)
			@set_update_batch($set, $index)
			
		
		if count(@ar_set) is 0
			if @db_debug
				return @display_error('db_must_use_set')
				
			
			return false
			
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		
		#  Batch this baby
		($i = 0,$total = count(@ar_set)$i < $total$i = $i + 100)
		{
		$sql = @_update_batch(@_protect_identifiers($table, true, null, false), array_slice(@ar_set, $i, 100), @_protect_identifiers($index), @ar_where)
		
		@query($sql)
		}
		
		@_reset_write()
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* The "set_update_batch" function.  Allows key/value pairs to be set for batch updating
*
* @access	public
* @param	array
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* The "set_update_batch" function.  Allows key/value pairs to be set for batch updating
*
* @access	public
* @param	array
* @param	string
* @param	boolean
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(6406, 6630, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _object_to_array_batch)
--- parse_identifier(T_STRING, _object_to_array_batch)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(6433, 6435, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // @todo error)
--- parse_comment(T_COMMENT, // @todo error)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			#  @todo error
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_block()
--- parse(6454, 6622, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $index_set)
--- parse_identifier(T_VARIABLE, $index_set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_block()
--- parse(6487, 6583, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $k2)
--- parse_identifier(T_VARIABLE, $k2)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(2, T_VARIABLE, $index)
--- parse_identifier(T_VARIABLE, $index)
--- parse_block()
--- parse(6499, 6506, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $index_set)
--- parse_identifier(T_VARIABLE, $index_set)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$index_set = true
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(6512, 6525, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $not)
--- parse_identifier(T_VARIABLE, $not)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $k)
--- parse_identifier(T_VARIABLE, $k)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '-')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '-')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $v)
--- parse_identifier(T_VARIABLE, $v)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$not.push $k + '-' + $v
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $escape)
--- parse_identifier(T_VARIABLE, $escape)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(6540, 6555, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k2)
--- parse_identifier(T_VARIABLE, $k2)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $v2)
--- parse_identifier(T_VARIABLE, $v2)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$clean[@_protect_identifiers($k2)] = $v2
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(6561, 6581, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $k2)
--- parse_identifier(T_VARIABLE, $k2)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, escape)
--- parse_identifier(T_STRING, escape)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $v2)
--- parse_identifier(T_VARIABLE, $v2)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$clean[@_protect_identifiers($k2)] = @escape($v2)
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if $k2 is $index
					$index_set = true
					
				else 
					$not.push $k + '-' + $v
					
				
				if $escape is false
					$clean[@_protect_identifiers($k2)] = $v2
					
				else 
					$clean[@_protect_identifiers($k2)] = @escape($v2)
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $index_set)
--- parse_identifier(T_VARIABLE, $index_set)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(6598, 6608, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_batch_missing_index')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_batch_missing_index')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_batch_missing_index')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_set)
--- parse_identifier(T_STRING, ar_set)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $clean)
--- parse_identifier(T_VARIABLE, $clean)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$index_set = false
			$clean = {}
			
			for $k2, $v2 of $v
				if $k2 is $index
					$index_set = true
					
				else 
					$not.push $k + '-' + $v
					
				
				if $escape is false
					$clean[@_protect_identifiers($k2)] = $v2
					
				else 
					$clean[@_protect_identifiers($k2)] = @escape($v2)
					
				
			
			if $index_set is false
				return @display_error('db_batch_missing_index')
				
			
			@ar_set.push $clean
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		$key = @_object_to_array_batch($key)
		
		if not is_array($key)
			#  @todo error
			
		
		for $k, $v of $key
			$index_set = false
			$clean = {}
			
			for $k2, $v2 of $v
				if $k2 is $index
					$index_set = true
					
				else 
					$not.push $k + '-' + $v
					
				
				if $escape is false
					$clean[@_protect_identifiers($k2)] = $v2
					
				else 
					$clean[@_protect_identifiers($k2)] = @escape($v2)
					
				
			
			if $index_set is false
				return @display_error('db_batch_missing_index')
				
			
			@ar_set.push $clean
			
		
		return @
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Empty Table
*
* Compiles a delete string and runs "DELETE FROM table"
*
* @access	public
* @param	string	the table to empty
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Empty Table
*
* Compiles a delete string and runs "DELETE FROM table"
*
* @access	public
* @param	string	the table to empty
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(6651, 6785, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(6663, 6724, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(6682, 6709, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(6692, 6702, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(6730, 6751, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$table = @_protect_identifiers($table, true, null, false)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _delete)
--- parse_identifier(T_STRING, _delete)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		else 
			$table = @_protect_identifiers($table, true, null, false)
			
		
		$sql = @_delete($table)
		
		@_reset_write()
		
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Truncate
*
* Compiles a truncate string and runs the query
* If the database does not support the truncate() command
* This function maps to "DELETE FROM table"
*
* @access	public
* @param	string	the table to truncate
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Truncate
*
* Compiles a truncate string and runs the query
* If the database does not support the truncate() command
* This function maps to "DELETE FROM table"
*
* @access	public
* @param	string	the table to truncate
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(6806, 6940, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(6818, 6879, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(6837, 6864, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(6847, 6857, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(6885, 6906, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$table = @_protect_identifiers($table, true, null, false)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _truncate)
--- parse_identifier(T_STRING, _truncate)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		else 
			$table = @_protect_identifiers($table, true, null, false)
			
		
		$sql = @_truncate($table)
		
		@_reset_write()
		
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Delete
*
* Compiles a delete string and runs the query
*
* @access	public
* @param	mixed	the table(s) to delete from. String or array
* @param	mixed	the where clause
* @param	mixed	the limit clause
* @param	boolean
* @return	object
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Delete
*
* Compiles a delete string and runs the query
*
* @access	public
* @param	mixed	the table(s) to delete from. String or array
* @param	mixed	the where clause
* @param	mixed	the limit clause
* @param	boolean
* @return	object
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $reset_data)
--- parse_identifier(T_VARIABLE, $reset_data)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_block()
--- parse(6982, 7326, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Combine any cached components with the current statements)
--- parse_comment(T_COMMENT, // Combine any cached components with the current statements)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _merge_cache)
--- parse_identifier(T_STRING, _merge_cache)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(7004, 7065, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(4, T_ISSET, isset)
--- parse_keyword(T_ISSET, isset)
--- parse_isset(isset)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(7023, 7050, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(7033, 7043, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_must_set_table')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					return @display_error('db_must_set_table')
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSEIF, elseif)
--- parse_keyword(T_ELSEIF, elseif)
--- parse_if(elseif)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(7078, 7120, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_block()
--- parse(7090, 7107, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, delete)
--- parse_identifier(T_STRING, delete)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $single_table)
--- parse_identifier(T_VARIABLE, $single_table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@delete($single_table, $where, $limit, false)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			for $single_table in $table
				@delete($single_table, $where, $limit, false)
				
			
			@_reset_write()
			return 
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(7126, 7147, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$table = @_protect_identifiers($table, true, null, false)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(7162, 7170, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, where)
--- parse_identifier(T_STRING, where)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $where)
--- parse_identifier(T_VARIABLE, $where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@where($where)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(2, T_STRING, NULL)
--- parse_identifier(T_STRING, NULL)
--- parse_block()
--- parse(7185, 7193, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, limit)
--- parse_identifier(T_STRING, limit)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $limit)
--- parse_identifier(T_VARIABLE, $limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@limit($limit)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_BOOLEAN_AND, &&)
--- parse_delimiter(T_BOOLEAN_AND, &&)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_wherein)
--- parse_identifier(T_STRING, ar_wherein)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_BOOLEAN_AND, &&)
--- parse_delimiter(T_BOOLEAN_AND, &&)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7239, 7267, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, db_debug)
--- parse_identifier(T_STRING, db_debug)
--- parse_block()
--- parse(7249, 7259, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_del_must_use_where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_del_must_use_where')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				return @display_error('db_del_must_use_where')
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if @db_debug
				return @display_error('db_del_must_use_where')
				
			
			return false
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _delete)
--- parse_identifier(T_STRING, _delete)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_limit)
--- parse_identifier(T_STRING, ar_limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $reset_data)
--- parse_identifier(T_VARIABLE, $reset_data)
--- parse_block()
--- parse(7306, 7313, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_write)
--- parse_identifier(T_STRING, _reset_write)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@_reset_write()
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, query)
--- parse_identifier(T_STRING, query)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		#  Combine any cached components with the current statements
		@_merge_cache()
		
		if $table is ''
			if not @ar_from[0]? 
				if @db_debug
					return @display_error('db_must_set_table')
					
				return false
				
			
			$table = @ar_from[0]
			
		else if is_array($table)
			for $single_table in $table
				@delete($single_table, $where, $limit, false)
				
			
			@_reset_write()
			return 
			
		else 
			$table = @_protect_identifiers($table, true, null, false)
			
		
		if $where isnt ''
			@where($where)
			
		
		if $limit isnt null
			@limit($limit)
			
		
		if count(@ar_where) is 0 and count(@ar_wherein) is 0 and count(@ar_like) is 0
			if @db_debug
				return @display_error('db_del_must_use_where')
				
			
			return false
			
		
		$sql = @_delete($table, @ar_where, @ar_like, @ar_limit)
		
		if $reset_data
			@_reset_write()
			
		
		return @query($sql)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* DB Prefix
*
* Prepends a database prefix if one exists in configuration
*
* @access	public
* @param	string	the table
* @return	string
*/)
--- parse_comment(T_DOC_COMMENT, /**
* DB Prefix
*
* Prepends a database prefix if one exists in configuration
*
* @access	public
* @param	string	the table
* @return	string
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(7347, 7379, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '')
--- parse_block()
--- parse(7359, 7367, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, display_error)
--- parse_identifier(T_STRING, display_error)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'db_table_name_required')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'db_table_name_required')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@display_error('db_table_name_required')
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, dbprefix)
--- parse_identifier(T_STRING, dbprefix)
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if $table is ''
			@display_error('db_table_name_required')
			
		
		return @dbprefix + $table
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Track Aliases
*
* Used to track SQL statements written with aliased tables.
*
* @access	private
* @param	string	The table to inspect
* @return	string
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Track Aliases
*
* Used to track SQL statements written with aliased tables.
*
* @access	private
* @param	string	The table to inspect
* @return	string
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_block()
--- parse(7396, 7570, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(7407, 7432, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_block()
--- parse(7419, 7427, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $t)
--- parse_identifier(T_VARIABLE, $t)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@_track_aliases($t)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			for $t in $table
				@_track_aliases($t)
				
			return 
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Does the string contain a comma?  If so, we need to separate)
--- parse_comment(T_COMMENT, // Does the string contain a comma?  If so, we need to separate)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // the string into discreet statements)
--- parse_comment(T_COMMENT, // the string into discreet statements)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strpos)
--- parse_identifier(T_STRING, strpos)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(7457, 7473, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, explode)
--- parse_identifier(T_STRING, explode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ',')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return @_track_aliases(explode(',', $table))
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // if a table alias is used we can recognize it by a space)
--- parse_comment(T_COMMENT, // if a table alias is used we can recognize it by a space)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, strpos)
--- parse_identifier(T_STRING, strpos)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, " ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, " ")
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(7496, 7568, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // if the alias is written with the AS keyword, remove it)
--- parse_comment(T_COMMENT, // if the alias is written with the AS keyword, remove it)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, preg_replace)
--- parse_identifier(T_STRING, preg_replace)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '/ AS /i')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '/ AS /i')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Grab the alias)
--- parse_comment(T_COMMENT, // Grab the alias)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, trim)
--- parse_identifier(T_STRING, trim)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, strrchr)
--- parse_identifier(T_STRING, strrchr)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, " ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, " ")
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Store the alias, if it doesn't already exist)
--- parse_comment(T_COMMENT, // Store the alias, if it doesn't already exist)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_aliased_tables)
--- parse_identifier(T_STRING, ar_aliased_tables)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(7555, 7566, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_aliased_tables)
--- parse_identifier(T_STRING, ar_aliased_tables)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $table)
--- parse_identifier(T_VARIABLE, $table)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@ar_aliased_tables.push $table
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			#  if the alias is written with the AS keyword, remove it
			$table = preg_replace('/ AS /i', ' ', $table)
			
			#  Grab the alias
			$table = trim(strrchr($table, " "))
			
			#  Store the alias, if it doesn't already exist
			if not in_array($table, @ar_aliased_tables)
				@ar_aliased_tables.push $table
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if is_array($table)
			for $t in $table
				@_track_aliases($t)
				
			return 
			
		
		#  Does the string contain a comma?  If so, we need to separate
		#  the string into discreet statements
		if strpos($table, ',') isnt false
			return @_track_aliases(explode(',', $table))
			
		
		#  if a table alias is used we can recognize it by a space
		if strpos($table, " ") isnt false
			#  if the alias is written with the AS keyword, remove it
			$table = preg_replace('/ AS /i', ' ', $table)
			
			#  Grab the alias
			$table = trim(strrchr($table, " "))
			
			#  Store the alias, if it doesn't already exist
			if not in_array($table, @ar_aliased_tables)
				@ar_aliased_tables.push $table
				
			
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Compile the SELECT statement
*
* Generates a query string based on which functions were used.
* Should not be called directly.  The get() function calls it.
*
* @access	private
* @return	string
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Compile the SELECT statement
*
* Generates a query string based on which functions were used.
* Should not be called directly.  The get() function calls it.
*
* @access	private
* @return	string
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $select_override)
--- parse_identifier(T_VARIABLE, $select_override)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(7591, 8225, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Combine any cached components with the current statements)
--- parse_comment(T_COMMENT, // Combine any cached components with the current statements)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _merge_cache)
--- parse_identifier(T_STRING, _merge_cache)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "select" portion of the query)
--- parse_comment(T_COMMENT, // Write the "select" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $select_override)
--- parse_identifier(T_VARIABLE, $select_override)
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(7619, 7626, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $select_override)
--- parse_identifier(T_VARIABLE, $select_override)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql = $select_override
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(7632, 7746, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_distinct)
--- parse_identifier(T_STRING, ar_distinct)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'SELECT ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'SELECT ')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'SELECT DISTINCT ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'SELECT DISTINCT ')
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7672, 7679, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '*')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '*')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$sql+='*'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ELSE, else)
--- parse_keyword(T_ELSE, else)
--- parse_block()
--- parse(7685, 7744, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Cycle through the "select" portion of the query and prep each column name.)
--- parse_comment(T_COMMENT, // Cycle through the "select" portion of the query and prep each column name.)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // The reason we protect identifiers here rather then in the select() function)
--- parse_comment(T_COMMENT, // The reason we protect identifiers here rather then in the select() function)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // is because until the user calls the from() function we don't know if there are aliases)
--- parse_comment(T_COMMENT, // is because until the user calls the from() function we don't know if there are aliases)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_block()
--- parse(7709, 7726, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					@ar_select[$key] = @_protect_identifiers($val)
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_select)
--- parse_identifier(T_STRING, ar_select)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				#  Cycle through the "select" portion of the query and prep each column name.
				#  The reason we protect identifiers here rather then in the select() function
				#  is because until the user calls the from() function we don't know if there are aliases
				for $key, $val of @ar_select
					@ar_select[$key] = @_protect_identifiers($val)
					
				
				$sql+=implode(', ', @ar_select)
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql = if ( not @ar_distinct) then 'SELECT ' else 'SELECT DISTINCT '
			
			if count(@ar_select) is 0
				$sql+='*'
				
			else 
				#  Cycle through the "select" portion of the query and prep each column name.
				#  The reason we protect identifiers here rather then in the select() function
				#  is because until the user calls the from() function we don't know if there are aliases
				for $key, $val of @ar_select
					@ar_select[$key] = @_protect_identifiers($val)
					
				
				$sql+=implode(', ', @ar_select)
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "FROM" portion of the query)
--- parse_comment(T_COMMENT, // Write the "FROM" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7772, 7794, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\nFROM ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\nFROM ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _from_tables)
--- parse_identifier(T_STRING, _from_tables)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\nFROM "
			
			$sql+=@_from_tables(@ar_from)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "JOIN" portion of the query)
--- parse_comment(T_COMMENT, // Write the "JOIN" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_join)
--- parse_identifier(T_STRING, ar_join)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7820, 7843, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_join)
--- parse_identifier(T_STRING, ar_join)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\n"
			
			$sql+=implode("\n", @ar_join)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "WHERE" portion of the query)
--- parse_comment(T_COMMENT, // Write the "WHERE" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_LOGICAL_OR, OR)
--- parse_delimiter(T_LOGICAL_OR, OR)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7882, 7897, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "WHERE ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "WHERE ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\n"
			
			$sql+="WHERE "
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "LIKE" portion of the query)
--- parse_comment(T_COMMENT, // Write the "LIKE" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7939, 7981, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_where)
--- parse_identifier(T_STRING, ar_where)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(7956, 7963, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\nAND ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\nAND ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$sql+="\nAND "
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_like)
--- parse_identifier(T_STRING, ar_like)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if count(@ar_where) > 0
				$sql+="\nAND "
				
			
			$sql+=implode("\n", @ar_like)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "GROUP BY" portion of the query)
--- parse_comment(T_COMMENT, // Write the "GROUP BY" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_groupby)
--- parse_identifier(T_STRING, ar_groupby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8007, 8030, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\nGROUP BY ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\nGROUP BY ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_groupby)
--- parse_identifier(T_STRING, ar_groupby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\nGROUP BY "
			
			$sql+=implode(', ', @ar_groupby)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "HAVING" portion of the query)
--- parse_comment(T_COMMENT, // Write the "HAVING" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_having)
--- parse_identifier(T_STRING, ar_having)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8056, 8078, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\nHAVING ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\nHAVING ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_having)
--- parse_identifier(T_STRING, ar_having)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\nHAVING "
			$sql+=implode("\n", @ar_having)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "ORDER BY" portion of the query)
--- parse_comment(T_COMMENT, // Write the "ORDER BY" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_orderby)
--- parse_identifier(T_STRING, ar_orderby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8104, 8166, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\nORDER BY ")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\nORDER BY ")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(2, T_STRING, implode)
--- parse_identifier(T_STRING, implode)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ', ')
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_orderby)
--- parse_identifier(T_STRING, ar_orderby)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_order)
--- parse_identifier(T_STRING, ar_order)
--- parse_token(1, T_IS_NOT_IDENTICAL, !==)
--- parse_delimiter(T_IS_NOT_IDENTICAL, !==)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_block()
--- parse(8141, 8164, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_order)
--- parse_identifier(T_STRING, ar_order)
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'desc')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'desc')
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ?, )
--- parse_delimiter(?, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' DESC')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' DESC')
--- parse_token(1, :, )
--- parse_delimiter(:, )
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, ' ASC')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, ' ASC')
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$sql+=(@ar_order is 'desc') then ' DESC' else ' ASC'
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\nORDER BY "
			$sql+=implode(', ', @ar_orderby)
			
			if @ar_order isnt false
				$sql+=(@ar_order is 'desc') then ' DESC' else ' ASC'
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // ----------------------------------------------------------------)
--- parse_comment(T_COMMENT, // ----------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // Write the "LIMIT" portion of the query)
--- parse_comment(T_COMMENT, // Write the "LIMIT" portion of the query)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, is_numeric)
--- parse_identifier(T_STRING, is_numeric)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_limit)
--- parse_identifier(T_STRING, ar_limit)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(8188, 8217, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_CONCAT_EQUAL, .=)
--- parse_delimiter(T_CONCAT_EQUAL, .=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_string(T_CONSTANT_ENCAPSED_STRING, "\n")
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _limit)
--- parse_identifier(T_STRING, _limit)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_limit)
--- parse_identifier(T_STRING, ar_limit)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_offset)
--- parse_identifier(T_STRING, ar_offset)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$sql+="\n"
			$sql = @_limit($sql, @ar_limit, @ar_offset)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $sql)
--- parse_identifier(T_VARIABLE, $sql)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		#  Combine any cached components with the current statements
		@_merge_cache()
		
		#  ----------------------------------------------------------------
		
		#  Write the "select" portion of the query
		
		if $select_override isnt false
			$sql = $select_override
			
		else 
			$sql = if ( not @ar_distinct) then 'SELECT ' else 'SELECT DISTINCT '
			
			if count(@ar_select) is 0
				$sql+='*'
				
			else 
				#  Cycle through the "select" portion of the query and prep each column name.
				#  The reason we protect identifiers here rather then in the select() function
				#  is because until the user calls the from() function we don't know if there are aliases
				for $key, $val of @ar_select
					@ar_select[$key] = @_protect_identifiers($val)
					
				
				$sql+=implode(', ', @ar_select)
				
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "FROM" portion of the query
		
		if count(@ar_from) > 0
			$sql+="\nFROM "
			
			$sql+=@_from_tables(@ar_from)
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "JOIN" portion of the query
		
		if count(@ar_join) > 0
			$sql+="\n"
			
			$sql+=implode("\n", @ar_join)
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "WHERE" portion of the query
		
		if count(@ar_where) > 0 or count(@ar_like) > 0
			$sql+="\n"
			
			$sql+="WHERE "
			
		
		$sql+=implode("\n", @ar_where)
		
		#  ----------------------------------------------------------------
		
		#  Write the "LIKE" portion of the query
		
		if count(@ar_like) > 0
			if count(@ar_where) > 0
				$sql+="\nAND "
				
			
			$sql+=implode("\n", @ar_like)
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "GROUP BY" portion of the query
		
		if count(@ar_groupby) > 0
			$sql+="\nGROUP BY "
			
			$sql+=implode(', ', @ar_groupby)
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "HAVING" portion of the query
		
		if count(@ar_having) > 0
			$sql+="\nHAVING "
			$sql+=implode("\n", @ar_having)
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "ORDER BY" portion of the query
		
		if count(@ar_orderby) > 0
			$sql+="\nORDER BY "
			$sql+=implode(', ', @ar_orderby)
			
			if @ar_order isnt false
				$sql+=(@ar_order is 'desc') then ' DESC' else ' ASC'
				
			
		
		#  ----------------------------------------------------------------
		
		#  Write the "LIMIT" portion of the query
		
		if is_numeric(@ar_limit)
			$sql+="\n"
			$sql = @_limit($sql, @ar_limit, @ar_offset)
			
		
		return $sql
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Object to Array
*
* Takes an object as input and converts the class variables to array key/vals
*
* @access	public
* @param	object
* @return	array
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Object to Array
*
* Takes an object as input and converts the class variables to array key/vals
*
* @access	public
* @param	object
* @return	array
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_block()
--- parse(8242, 8345, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_object)
--- parse_identifier(T_STRING, is_object)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(8256, 8261, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return $object
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_STRING, get_object_vars)
--- parse_identifier(T_STRING, get_object_vars)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(8292, 8337, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // There are some built in keys we need to ignore for this conversion)
--- parse_comment(T_COMMENT, // There are some built in keys we need to ignore for this conversion)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_object)
--- parse_identifier(T_STRING, is_object)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_BOOLEAN_AND, &&)
--- parse_delimiter(T_BOOLEAN_AND, &&)
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_array)
--- parse_identifier(T_STRING, is_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_BOOLEAN_AND, &&)
--- parse_delimiter(T_BOOLEAN_AND, &&)
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '_parent_name')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '_parent_name')
--- parse_block()
--- parse(8325, 8335, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $key)
--- parse_identifier(T_VARIABLE, $key)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				$array[$key] = $val
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			#  There are some built in keys we need to ignore for this conversion
			if not is_object($val) and  not is_array($val) and $key isnt '_parent_name'
				$array[$key] = $val
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_object($object)
			return $object
			
		
		$array = {}
		for $key, $val of get_object_vars($object)
			#  There are some built in keys we need to ignore for this conversion
			if not is_object($val) and  not is_array($val) and $key isnt '_parent_name'
				$array[$key] = $val
				
			
		
		return $array
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Object to Array
*
* Takes an object as input and converts the class variables to array key/vals
*
* @access	public
* @param	object
* @return	array
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Object to Array
*
* Takes an object as input and converts the class variables to array key/vals
*
* @access	public
* @param	object
* @return	array
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_block()
--- parse(8362, 8492, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, is_object)
--- parse_identifier(T_STRING, is_object)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(8376, 8381, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return $object
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $out)
--- parse_identifier(T_VARIABLE, $out)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, get_object_vars)
--- parse_identifier(T_STRING, get_object_vars)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $object)
--- parse_identifier(T_VARIABLE, $object)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $fields)
--- parse_identifier(T_VARIABLE, $fields)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, array_keys)
--- parse_identifier(T_STRING, array_keys)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $out)
--- parse_identifier(T_VARIABLE, $out)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $fields)
--- parse_identifier(T_VARIABLE, $fields)
--- parse_block()
--- parse(8426, 8484, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // There are some built in keys we need to ignore for this conversion)
--- parse_comment(T_COMMENT, // There are some built in keys we need to ignore for this conversion)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_IS_NOT_EQUAL, !=)
--- parse_delimiter(T_IS_NOT_EQUAL, !=)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, '_parent_name')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, '_parent_name')
--- parse_block()
--- parse(8440, 8482, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $out)
--- parse_identifier(T_VARIABLE, $out)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_block()
--- parse(8463, 8480, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, [, )
--- parse_delimiter([, )
--- parse_open_bracket()
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, ], )
--- parse_delimiter(], )
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $data)
--- parse_identifier(T_VARIABLE, $data)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $i)
--- parse_identifier(T_VARIABLE, $i)
--- parse_token(1, T_INC, ++)
--- parse_delimiter(T_INC, ++)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

					$array[$i][$val] = $data
					$i++
					
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				
				$i = 0
				for $data in $out[$val]
					$array[$i][$val] = $data
					$i++
					
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			#  There are some built in keys we need to ignore for this conversion
			if $val isnt '_parent_name'
				
				$i = 0
				for $data in $out[$val]
					$array[$i][$val] = $data
					$i++
					
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(2, T_VARIABLE, $array)
--- parse_identifier(T_VARIABLE, $array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if not is_object($object)
			return $object
			
		
		$array = {}
		$out = get_object_vars($object)
		$fields = array_keys($out)
		
		for $val in $fields
			#  There are some built in keys we need to ignore for this conversion
			if $val isnt '_parent_name'
				
				$i = 0
				for $data in $out[$val]
					$array[$i][$val] = $data
					$i++
					
				
			
		
		return $array
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Start Cache
*
* Starts AR caching
*
* @access	public
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Start Cache
*
* Starts AR caching
*
* @access	public
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(8508, 8517, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@ar_caching = true
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Stop Cache
*
* Stops AR caching
*
* @access	public
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Stop Cache
*
* Stops AR caching
*
* @access	public
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(8533, 8542, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_caching)
--- parse_identifier(T_STRING, ar_caching)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@ar_caching = false
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Flush Cache
*
* Empties the AR cache
*
* @access	public
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Flush Cache
*
* Empties the AR cache
*
* @access	public
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(8558, 8664, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_run)
--- parse_identifier(T_STRING, _reset_run)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_select')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_select')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_from')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_from')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_join')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_join')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_where')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_like')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_like')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_groupby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_groupby')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_having')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_having')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_orderby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_orderby')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_set')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_exists')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_exists')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		@_reset_run(
		
			'ar_cache_select':{}
			'ar_cache_from':{}
			'ar_cache_join':{}
			'ar_cache_where':{}
			'ar_cache_like':{}
			'ar_cache_groupby':{}
			'ar_cache_having':{}
			'ar_cache_orderby':{}
			'ar_cache_set':{}
			'ar_cache_exists':{}
			
		)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Merge Cache
*
* When called, this function merges any cached AR arrays with
* locally called ones.
*
* @access	private
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Merge Cache
*
* When called, this function merges any cached AR arrays with
* locally called ones.
*
* @access	private
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(8680, 8827, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8697, 8700, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_RETURN, return)
--- parse_keyword(T_RETURN, return)
--- parse_expression()
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			return 
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_exists)
--- parse_identifier(T_STRING, ar_cache_exists)
--- parse_block()
--- parse(8717, 8781, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $ar_variable)
--- parse_identifier(T_VARIABLE, $ar_variable)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $ar_cache_var)
--- parse_identifier(T_VARIABLE, $ar_cache_var)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_cache_')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_cache_')
--- parse_token(1, ., )
--- parse_delimiter(., )
--- parse_token(2, T_VARIABLE, $val)
--- parse_identifier(T_VARIABLE, $val)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_VARIABLE, $ar_cache_var)
--- parse_identifier(T_VARIABLE, $ar_cache_var)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_IS_EQUAL, ==)
--- parse_delimiter(T_IS_EQUAL, ==)
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8753, 8756, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_CONTINUE, continue)
--- parse_keyword(T_CONTINUE, continue)
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				continue
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_VARIABLE, $ar_variable)
--- parse_identifier(T_VARIABLE, $ar_variable)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_STRING, array_unique)
--- parse_identifier(T_STRING, array_unique)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_STRING, array_merge)
--- parse_identifier(T_STRING, array_merge)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_VARIABLE, $ar_cache_var)
--- parse_identifier(T_VARIABLE, $ar_cache_var)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_VARIABLE, $ar_variable)
--- parse_identifier(T_VARIABLE, $ar_variable)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			$ar_variable = 'ar_' + $val
			$ar_cache_var = 'ar_cache_' + $val
			
			if count(@$ar_cache_var) is 0
				continue
				
			
			@$ar_variable = array_unique(array_merge(@$ar_cache_var, @$ar_variable))
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // If we are "protecting identifiers" we need to examine the "from")
--- parse_comment(T_COMMENT, // If we are "protecting identifiers" we need to examine the "from")
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // portion of the query to determine if there are any aliases)
--- parse_comment(T_COMMENT, // portion of the query to determine if there are any aliases)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _protect_identifiers)
--- parse_identifier(T_STRING, _protect_identifiers)
--- parse_token(1, T_IS_IDENTICAL, ===)
--- parse_delimiter(T_IS_IDENTICAL, ===)
--- parse_token(2, T_STRING, TRUE)
--- parse_identifier(T_STRING, TRUE)
--- parse_token(1, T_LOGICAL_AND, AND)
--- parse_delimiter(T_LOGICAL_AND, AND)
--- parse_token(2, T_STRING, count)
--- parse_identifier(T_STRING, count)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_cache_from)
--- parse_identifier(T_STRING, ar_cache_from)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, >, )
--- parse_delimiter(>, )
--- parse_token(3, T_LNUMBER, 0)
--- parse_number(T_LNUMBER, 0)
--- parse_block()
--- parse(8815, 8825, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _track_aliases)
--- parse_identifier(T_STRING, _track_aliases)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_from)
--- parse_identifier(T_STRING, ar_from)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			@_track_aliases(@ar_from)
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		if count(@ar_cache_exists) is 0
			return 
			
		
		for $val in @ar_cache_exists
			$ar_variable = 'ar_' + $val
			$ar_cache_var = 'ar_cache_' + $val
			
			if count(@$ar_cache_var) is 0
				continue
				
			
			@$ar_variable = array_unique(array_merge(@$ar_cache_var, @$ar_variable))
			
		
		#  If we are "protecting identifiers" we need to examine the "from"
		#  portion of the query to determine if there are any aliases
		if @_protect_identifiers is true and count(@ar_cache_from) > 0
			@_track_aliases(@ar_from)
			
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Resets the active record values.  Called by the get() function
*
* @access	private
* @param	array	An array of fields to reset
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Resets the active record values.  Called by the get() function
*
* @access	private
* @param	array	An array of fields to reset
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_block()
--- parse(8844, 8892, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FOREACH, foreach)
--- parse_keyword(T_FOREACH, foreach)
--- parse_foreach(foreach)
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_block()
--- parse(8860, 8890, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_IF, if)
--- parse_keyword(T_IF, if)
--- parse_if(if)
--- parse_parens()
--- parse_expression()
--- parse_token(1, !, )
--- parse_delimiter(!, )
--- parse_token(2, T_STRING, in_array)
--- parse_identifier(T_STRING, in_array)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_token(1, ,, )
--- parse_delimiter(,, )
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, ar_store_array)
--- parse_identifier(T_STRING, ar_store_array)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_block()
--- parse(8879, 8888, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_VARIABLE, $item)
--- parse_identifier(T_VARIABLE, $item)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(2, T_VARIABLE, $default_value)
--- parse_identifier(T_VARIABLE, $default_value)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

				@$item = $default_value
				
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

			if not in_array($item, @ar_store_array)
				@$item = $default_value
				
			
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		for $item, $default_value of $ar_reset_items
			if not in_array($item, @ar_store_array)
				@$item = $default_value
				
			
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Resets the active record values.  Called by the get() function
*
* @access	private
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Resets the active record values.  Called by the get() function
*
* @access	private
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(8908, 9067, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_select')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_select')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_from')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_from')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_join')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_join')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_where')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_like')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_like')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_groupby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_groupby')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_having')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_having')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_orderby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_orderby')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_wherein')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_wherein')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_aliased_tables')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_aliased_tables')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_distinct')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_distinct')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_limit')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_limit')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_offset')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_offset')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_order')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_order')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_run)
--- parse_identifier(T_STRING, _reset_run)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		$ar_reset_items = 
			'ar_select':{}
			'ar_from':{}
			'ar_join':{}
			'ar_where':{}
			'ar_like':{}
			'ar_groupby':{}
			'ar_having':{}
			'ar_orderby':{}
			'ar_wherein':{}
			'ar_aliased_tables':{}
			'ar_distinct':false
			'ar_limit':false
			'ar_offset':false
			'ar_order':false
			
		
		@_reset_run($ar_reset_items)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, // --------------------------------------------------------------------)
--- parse_comment(T_COMMENT, // --------------------------------------------------------------------)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_DOC_COMMENT, /**
* Resets the active record "write" values.
*
* Called by the insert() update() insert_batch() update_batch() and delete() functions
*
* @access	private
* @return	void
*/)
--- parse_comment(T_DOC_COMMENT, /**
* Resets the active record "write" values.
*
* Called by the insert() update() insert_batch() update_batch() and delete() functions
*
* @access	private
* @return	void
*/)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(4, T_FUNCTION, function)
--- parse_keyword(T_FUNCTION, function)
--- parse_function(function)
--- parse_arglist()
--- parse_block()
--- parse(9083, 9176, 1)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_token(1, =, )
--- parse_delimiter(=, )
--- parse_let()
--- parse_expression()
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_set')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_set')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_from')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_from')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_where')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_where')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_like')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_like')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_orderby')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_orderby')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_keys')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_keys')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(4, T_ARRAY, array)
--- parse_keyword(T_ARRAY, array)
--- parse_array(array)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_limit')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_limit')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(5, T_CONSTANT_ENCAPSED_STRING, 'ar_order')
--- parse_string(T_CONSTANT_ENCAPSED_STRING, 'ar_order')
--- parse_token(1, T_DOUBLE_ARROW, =>)
--- parse_delimiter(T_DOUBLE_ARROW, =>)
--- parse_token(2, T_STRING, FALSE)
--- parse_identifier(T_STRING, FALSE)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(2, T_VARIABLE, $this)
--- parse_identifier(T_VARIABLE, $this)
--- parse_token(2, T_STRING, _reset_run)
--- parse_identifier(T_STRING, _reset_run)
--- parse_token(1, (, )
--- parse_delimiter((, )
--- parse_token(2, T_VARIABLE, $ar_reset_items)
--- parse_identifier(T_VARIABLE, $ar_reset_items)
--- parse_token(1, ), )
--- parse_delimiter(), )
--- parse_token(1, ;, )
--- parse_delimiter(;, )
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_blend()

		$ar_reset_items = 
			'ar_set':{}
			'ar_from':{}
			'ar_where':{}
			'ar_like':{}
			'ar_orderby':{}
			'ar_keys':{}
			'ar_limit':false
			'ar_order':false
			
		
		@_reset_run($ar_reset_items)
		
------ parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, /* End of file DB_active_rec.php */)
--- parse_comment(T_COMMENT, /* End of file DB_active_rec.php */)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(6, T_COMMENT, /* Location: ./system/database/DB_active_rec.php */)
--- parse_comment(T_COMMENT, /* Location: ./system/database/DB_active_rec.php */)
--- parse_token(1, T_WHITESPACE, 
)
--- parse_delimiter(T_WHITESPACE, 
)
--- parse_token(0, , )
/var/www/ci_node/system/database/DB_active_rec.php.coffee
_count_string
_delete
_from_tables
_has_operator
_insert
_insert_batch
_like_escape_chr
_like_escape_str
_limit
_protect_identifiers
_random_keyword
_replace
_truncate
_update
_update_batch
array_diff
array_keys
array_merge
array_slice
array_unique
array_values
count
current
db_debug
defined
display_error
end
escape
escape_like_str
escape_str
explode
get_object_vars
implode
in_array
is_array
is_bool
is_null
is_numeric
is_object
is_string
ksort
null
num_rows
numrows
preg_match
preg_replace
query
row
sort
sprintf
strpos
strrchr
strtolower
strtoupper
trim
