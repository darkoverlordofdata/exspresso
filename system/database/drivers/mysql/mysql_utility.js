// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global.CI_DB_mysql_utility = (function(_super) {

    __extends(CI_DB_mysql_utility, _super);

    function CI_DB_mysql_utility() {
      return CI_DB_mysql_utility.__super__.constructor.apply(this, arguments);
    }

    CI_DB_mysql_utility.prototype._list_databases = function() {
      return "SHOW DATABASES";
    };

    CI_DB_mysql_utility.prototype._optimize_table = function($table) {
      return "OPTIMIZE TABLE " + this.db._escape_identifiers($table);
    };

    CI_DB_mysql_utility.prototype._repair_table = function($table) {
      return "REPAIR TABLE " + this.db._escape_identifiers($table);
    };

    CI_DB_mysql_utility.prototype._backup = function($params, $callback) {
      var $add_drop, $add_insert, $filename, $format, $ignore, $newline, $output, $sql_list, $table, $tables, async, _i, _len,
        _this = this;
      if ($params == null) {
        $params = {};
      }
      if (count($params) === 0) {
        return false;
      }
      async = require('async');
      $tables = $params.tables;
      $ignore = $params.ignore;
      $filename = $params.filename;
      $format = $params.format;
      $add_drop = $params.add_drop;
      $add_insert = $params.add_insert;
      $newline = $param.newline;
      $output = '';
      $sql_list = [];
      $tables = array_diff($tables, $ignore);
      for (_i = 0, _len = $tables.length; _i < _len; _i++) {
        $table = $tables[_i];
        $sql_list.push("SHOW CREATE TABLE `" + this.db.database + '`.' + $table);
        $sql_list.push("SELECT * FROM " + $table);
      }
      return async.mapSeries($sql_list, this.db.query, function($err, $results) {
        var $field, $field_str, $i, $index, $is_int, $query, $result, $row, $v, $val, $val_str, _j, _k, _l, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
        if ($err) {
          $callback($err);
        }
        for ($index = _j = 0, _len1 = $results.length; _j < _len1; $index = ++_j) {
          $query = $results[$index];
          $table = $tables[Math.floor($index / 2)];
          if ($index & 1 === 0) {
            $output += '#' + $newline + '# TABLE STRUCTURE FOR: ' + $table + $newline + '#' + $newline + $newline;
            if ($add_drop === true) {
              $output += 'DROP TABLE IF EXISTS ' + $table + ';' + $newline + $newline;
            }
            $i = 0;
            $result = $query.result_array();
            _ref = $result[0];
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              $val = _ref[_k];
              if ($i++ % 2) {
                $output += $val + ';' + $newline + $newline;
              }
            }
          } else {
            if ($add_insert === false) {
              continue;
            }
            if ($query.num_rows() === 0) {
              continue;
            }
            $i = 0;
            $field_str = '';
            $is_int = {};
            while ($field = mysql_fetch_field($query.result_id)) {
              $is_int[$i] = in_array(strtolower(mysql_field_type($query.result_id, $i)), ['tinyint', 'smallint', 'mediumint', 'int', 'bigint'], true) ? true : false;
              $field_str += '`' + $field.name + '`, ';
              $i++;
            }
            $field_str = preg_replace("/, $/", "", $field_str);
            _ref1 = $query.result_array();
            for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
              $row = _ref1[_l];
              $val_str = '';
              $i = 0;
              for (_m = 0, _len4 = $row.length; _m < _len4; _m++) {
                $v = $row[_m];
                if ($v === null) {
                  $val_str += 'NULL';
                } else {
                  if ($is_int[$i] === false) {
                    $val_str += _this.db.escape($v);
                  } else {
                    $val_str += $v;
                  }
                }
                $val_str += ', ';
                $i++;
              }
              $val_str = preg_replace("/, $/", "", $val_str);
              $output += 'INSERT INTO ' + $table + ' (' + $field_str + ') VALUES (' + $val_str + ');' + $newline;
            }
            $output += $newline + $newline;
          }
        }
        return $callback(null, $output);
      });
    };

    return CI_DB_mysql_utility;

  })(CI_DB_utility);

  module.exports = CI_DB_mysql_utility;

}).call(this);
