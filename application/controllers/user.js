// Generated by CoffeeScript 1.3.3
(function() {
  var APPPATH, BASEPATH, CI_Controller, ENVIRONMENT, EXT, Exspresso, FCPATH, SYSDIR, User, WEBROOT, bcrypt, config_item, get_config, is_loaded, load_class, load_new, load_object, log_message, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require(process.cwd() + '/index'), APPPATH = _ref.APPPATH, BASEPATH = _ref.BASEPATH, ENVIRONMENT = _ref.ENVIRONMENT, EXT = _ref.EXT, FCPATH = _ref.FCPATH, SYSDIR = _ref.SYSDIR, WEBROOT = _ref.WEBROOT;

  _ref1 = require(BASEPATH + 'core/Common'), Exspresso = _ref1.Exspresso, config_item = _ref1.config_item, get_config = _ref1.get_config, is_loaded = _ref1.is_loaded, load_class = _ref1.load_class, load_new = _ref1.load_new, load_object = _ref1.load_object, log_message = _ref1.log_message;

  CI_Controller = require(BASEPATH + 'core/Controller');

  bcrypt = require('bcrypt');

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      User.__super__.constructor.call(this);
      this.load.database();
    }

    User.prototype.login = function() {
      var _this = this;
      if (!(this.input.cookie('user') != null) || !(this.input.cookie('code') != null)) {
        return this.load.view("user/login", {
          url: this.input.post("url")
        });
      } else {
        this.db.from('user');
        this.db.where('email', this.input.cookie('user'));
        return this.db.get(function($err, $user) {
          if ($err) {
            _this.load.view("user/login", {
              url: _this.input.post("url")
            });
            return;
          }
          if (!($user != null)) {
            _this.load.view("user/login", {
              url: _this.input.post("url")
            });
            return;
          }
          if ($user.code === _this.input.cookie('code')) {
            _this.session.set_userdata('user', $user);
            _this.session.set_flashdata('info', 'Hello ' + $user.name);
            if (_this.input.post("url") != null) {
              return _this.redirect(_this.input.post("url"));
            } else {
              return _this.redirect($user.path);
            }
          } else {
            return _this.redirect("/logout");
          }
        });
      }
    };

    User.prototype.logout = function() {
      this.session.set_flashdata('info', 'Goodbye!');
      this.session.unset_userdata('user');
      this.input.set_cookie('user', '');
      this.input.set_cookie('code', '');
      return this.redirect("/");
    };

    User.prototype.authenticate = function() {
      var $email, $password, $remember_me,
        _this = this;
      $email = this.input.post("email");
      $password = this.input.post("password");
      $remember_me = this.input.post("remember_me");
      this.db.from('user');
      this.db.where('email', $email);
      return this.db.get(function($err, $user) {
        if (($user.length != null) && $user.length === 0) {
          _this.session.set_flashdata('error', 'Invalid credentials. Please try again.');
          _this.redirect("/login");
          return;
        }
        if (bcrypt.compareSync($password, $user.code)) {
          _this.session.set_userdata('user', $user);
          if ($remember_me) {
            _this.input.set_cookie('user', $email, 900000);
            _this.input.set_cookie('code', $user.code, 900000);
          }
          _this.session.set_flashdata('info', 'Hello ' + $user.name);
          if (_this.input.post("url") != null) {
            return _this.redirect(_this.input.post("url"));
          } else {
            return _this.redirect($user.path);
          }
        } else {
          _this.session.set_flashdata('error', 'Invalid credentials. Please try again.');
          return _this.redirect("/login");
        }
      });
    };

    User.prototype.forgot_password = function() {
      return this.load.view("user/forgot_password");
    };

    return User;

  })(CI_Controller);

  module.exports = User;

}).call(this);
