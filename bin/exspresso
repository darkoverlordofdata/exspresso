#!/usr/bin/env coffee
#+--------------------------------------------------------------------+
#| exspresso
#+--------------------------------------------------------------------+
#| Copyright DarkOverlordOfData (c) 2012 - 2013
#+--------------------------------------------------------------------+
#|
#| This file is a part of Expresso
#|
#| Exspresso is free software you can copy, modify, and distribute
#| it under the terms of the MIT License
#|
#+--------------------------------------------------------------------+
#
# expresso 
#
#   Scafolding script
#
#   exspresso new <appname>         --  Create new app
#
#
#

fs = require('fs')
path = require('path')
templates = require('../lib/templates.coffee')
{exec} = require("child_process")
ucfirst = ($str) -> $str[0].toUpperCase() + $str[1..]
$cwd = process.cwd()
MODE = 0o755


#
# Main
#
# Decode the command
#
main = ->
  process.argv.shift() # coffee
  process.argv.shift() # ./bin/exspresso

  switch process.argv.shift()
    when 'new'        then cmd_new process.argv.shift()
    when 'module'     then cmd_module process.argv.shift()
    when 'controller' then cmd_controller process.argv.shift(), process.argv.shift()
    when 'model'      then cmd_model process.argv.shift(), process.argv...
    else
      console.log 'Usage:'
      console.log ''
      console.log 'exspresso new <appname>'
      console.log 'exspresso module <name>'
      console.log 'exspresso controller <name> <method>'
      console.log 'exspresso model <name> <field1:type> <fieldn:type>'

#
# New Application
#
# @param  [String]  app name
# @return none
#
cmd_new = ($app) ->
  
  unless $app?
    console.log 'No project specified'
    process.exit()

  # Destination folder: ~/Git/project
  $dst = process.cwd()+'/'+$app

  console.log "Creating #{$app}..."
  fs.mkdirSync $dst, MODE

  write_file "#{$dst}/index.coffee",  templates.run($app)
  write_file "#{$dst}/index.js",      templates.index($app)
  write_file "#{$dst}/license.md",    templates.license($app)
  write_file "#{$dst}/package.json",  templates.package($app)
  write_file "#{$dst}/Procfile",      templates.Procfile($app)
  write_file "#{$dst}/readme.md",     templates.readme($app)
  write_file "#{$dst}/#{$app}.js",    templates.project($app)


  # Source folder:  /usr/local/lib/node_modules/exspresso
  $src = path.resolve(__dirname, '..')
  $src_folders = [
    "#{$src}/application/config"
    "#{$src}/application/controllers"
    "#{$src}/application/errors"
    "#{$src}/application/views"
  ].join(' ')

  console.log "Creating application folders..."
  fs.mkdirSync "#{$dst}/modules", MODE
  fs.mkdirSync "#{$dst}/#{$app}", MODE
  fs.mkdirSync "#{$dst}/#{$app}/assets", MODE
  fs.mkdirSync "#{$dst}/#{$app}/core", MODE
  fs.mkdirSync "#{$dst}/#{$app}/helpers", MODE
  fs.mkdirSync "#{$dst}/#{$app}/hooks", MODE
  fs.mkdirSync "#{$dst}/#{$app}/lib", MODE
  fs.mkdirSync "#{$dst}/#{$app}/models", MODE
  fs.mkdirSync "#{$dst}/#{$app}/modules", MODE

  console.log "Copying default application content..."
  exec "cp -R #{$src_folders} #{$dst}/#{$app}", ($err, $output) ->
    console.log $err.message if $err?

    console.log "Updating config/config..."
    fs.writeFileSync "#{$dst}/#{$app}/config/config.coffee",  templates.config($app),   mode: MODE

    console.log "Extend core/Connect..."
    fs.writeFileSync "#{$dst}/#{$app}/core/#{ucfirst($app)}Connect.coffee",  templates.extend($app),   mode: MODE

    console.log 'Ok.'

#
# Generate Module
#
# @param  [String]  app name
# @return none
#
cmd_module = ($name) ->
  if ($app = get_application()) is false
    console.log 'Not a valid application folder.'
    process.exit(1)

  if fs.existsSync("#{$cwd}/modules/#{$name}")
    console.log 'Module already exists.'
    process.exit(1)

  console.log "Creating folder structure for module #{$name}"
  fs.mkdirSync "#{$cwd}/modules/#{$name}", MODE
  fs.mkdirSync "#{$cwd}/modules/#{$name}/config", MODE
  fs.mkdirSync "#{$cwd}/modules/#{$name}/controllers", MODE
  fs.mkdirSync "#{$cwd}/modules/#{$name}/lib", MODE
  fs.mkdirSync "#{$cwd}/modules/#{$name}/models", MODE
  fs.mkdirSync "#{$cwd}/modules/#{$name}/views", MODE
  write_file "#{$cwd}/modules/#{$name}/#{ucfirst($name)}.coffee", templates.module($name)

#
# Generate Controller with View and Route
#
# @param  [String]  model/controller name
# @param  [String]  default method name
# @return none
#
cmd_controller = ($name, $method = 'index') ->
  if ($app = get_application()) is false
    console.log 'Not a valid application folder'
    process.exit(1)

  [$mod, $name] = $name.split('/')
  [$mod, $name] = ['', $mod] unless $name?

  if $mod is ''
    add_method "#{$cwd}/#{$app}/controllers/#{ucfirst($name)}.coffee", $name, $method
    write_file "#{$cwd}/#{$app}/views/#{$name}-#{$method}.eco", templates.view($name, $method)
    add_route "#{$cwd}/#{$app}/config/routes.coffee", '', $name, $method
  else
    add_method "#{$cwd}/modules/#{$mod}/controllers/#{ucfirst($name)}.coffee", $name, $method
    write_file "#{$cwd}/modules/#{$mod}/views/#{$name}-#{$method}.eco", templates.view($name, $method)
    add_route "#{$cwd}/modules/#{$mod}/config/routes.coffee", $mod, $name, $method


#
# Generate Model
#
# @param  [String]  module/model name
# @param  [Array<String>]  list of fields:types
# @return none
#
cmd_model = ($name, $fields...) ->
  if ($app = get_application()) is false
    console.log 'Not a valid application folder'
    process.exit(1)

  [$mod, $name] = $name.split('/')
  [$mod, $name] = ['', $mod] unless $name?

  if $mod is ''
    write_file "#{$cwd}/#{$app}/models/#{ucfirst($name)}.coffee", templates.model('', $name, $fields)
  else
    write_file "#{$cwd}/modules/#{$mod}/models/#{ucfirst($name)}.coffee", templates.model($mod, $name, $fields)
    add_model "#{$cwd}/modules/#{$mod}/#{ucfirst($mod)}.coffee", $name

#
# Get Application
#
# @return [String]  current application name or false
#
get_application = () ->
  if fs.existsSync("#{$cwd}/package.json")
    require("#{$cwd}/package.json").name
  else false

#
# Write File
#
# @param [String] path  path to file
# @param [String] data  data to write to file
# @retun none
#
write_file = ($path, $data) ->
  console.log "Writing #{$path}..."
  fs.writeFileSync "#{$path}", $data, mode: MODE
  return

#
# Add Route
#
# @param [String] path  path to config/routes
# @param [String] name  controller name
# @param [String] mod module name
# @param [String] method  method name
# @retun [String] code
#
add_route = ($path, $mod, $name, $method) ->
  if fs.existsSync($path)
    write_file $path, [
      fs.readFileSync($path, encoding: 'utf8')
      templates.route($mod, $name, $method)
    ].join('\n')

  else
    write_file $path, templates.routes($mod, $name, $method)


#
# Add Method
#
# @param [String] path  path to config/routes
# @param [String] name  controller name
# @param [String] method  method name
# @retun [String] code
#
add_method = ($path, $name, $method) ->
  if fs.existsSync($path)
    write_file $path, [
      fs.readFileSync($path, encoding: 'utf8')
      templates.method($name, $method)
    ].join('\n')

  else
    write_file $path, templates.controller($name, $method)

#
# Add Model
#
# @param [String] path  path to config/routes
# @param [String] name  model name
# @retun [String] code
#
add_model = ($path, $name) ->
  if fs.existsSync($path)
    write_file $path, [
      fs.readFileSync($path, encoding: 'utf8')
      templates.migrate($name)
    ].join('\n')

  else
    console.log 'Module not found: '+$path


main()