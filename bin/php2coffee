#!/usr/bin/env php
<?php
/*
+--------------------------------------------------------------------+
| php2coffee.php
+--------------------------------------------------------------------+
| Copyright DarkOverlordOfData (c) 2012
+--------------------------------------------------------------------+
|                                                                    
| This file is a part of NodeLiter
|                                                                    
| NodeLiter is free software; you can copy, modify, and distribute 
| it under the terms of the GNU General Public License Version 3     
|                                                                    
+--------------------------------------------------------------------+
*/
/**
 * 
 * @package     not-php
 * @subpackage  php2coffee
 * @category    tools
 * @copyright   DarkOverlordOfData (c) 2012
 * @author      BruceDavidson@darkoverlordofdata.com
 * 
 *
 *	php2coffee
 */
$man = <<<DOC

Usage: php2coffee [OPTIONS] PATH [DESTINATION]
 
  -h, --help          display this help
  -j, --javascript    compiles resulting .coffee file
  -m, --markup        compiles into .eco markup template
  -r, --recursive     recurse source path
  -t, --trace         trace output
  -T, --tabs          use tab character in output (default is spaces)
  -d, --dump          dump of tokens
  
 
DOC;

include_once 'lib/Parser.php';
include_once 'lib/constants.php';
include_once 'lib/file_helper.php';
error_reporting(E_ALL);

$javascript   = false;    // compiles resulting .coffee file
$markup       = false;    // compile to .eco markup template
$recursive    = false;    // recurse source path
$trace        = false;    // trace output
$tabs         = false;    // use tab char
$dump         = false;    // dump token list
$paths        = array();  // path arguments
$src          = '';       // arg0 = source folder
$dst          = '';       // arg1 = optional destination folder

unset($argv[0]);          // scriptname: php2coffee.php

foreach ($argv as $arg)   // decode the command line
  switch ($arg) {
  
    case '-h':
    case '--help':
      echo $man;
      exit;
    
    case '-j':
    case '--javascript':
      $javascript = true;  
      break;
    
    case '-m':
    case '--markup':
      $markup = true;
      break;

    case '-r':
    case '--recursive':  
      $recursive = true;  
      break;
    
    case '-t':  
    case '--trace':  
      $trace = true;  
      break;

    case '-T':
    case '--tabs':
      $tabs = true;
      break;

    case '-d':
    case '--dump':
      $dump = true;
      break;

    default:
      $paths[] = $arg;
  }
  
// global flags
define('DUMP',      $dump);
define('TRACE',     $trace);
define('HTML',      $markup);
if ($tabs == true)
  define('TABS',    '\t');
else
  define('TABS',    '  ');
if ($markup == true)
  define('EXT', '.eco');
else
  define('EXT', '.coffee');

// unpack path args
switch (count($paths)) {
  case 1:
    $src = realpath($paths[0]);
    if ($src === FALSE) {
      die("Invalid path: ".$paths[0].PHP_EOL);
    }
    $dst = $src.EXT;
    break;
  
  case 2:
    $src = realpath($paths[0]);
    if ($src === FALSE) {
      die("Invalid path: ".$paths[0].PHP_EOL);
    }
    $dst = realpath($paths[1]);
    if ($dst === FALSE) {
      die("Invalid path: ".$paths[1].PHP_EOL);
    }
    break;

  default:
    echo "\nWrong number of parameters.\n$man";
    exit(0);


}

// process each source file
if (! is_dir($src)) {

	$parser = new Parser();
	try {
		write_file($dst, $parser->convert($src));
		if ($javascript) {
			system("coffee -c -b $dst");
		}
	}
	catch (Exception $e) {
		echo $e->getMessage();
	}
}
else {

	$i = 0;
	$dir = get_filenames($src, TRUE, $recursive);
	foreach ($dir as $f) {
		if (fnmatch('*.php', $f)) {
			$f2 = copyto_filename($f, $src, $dst).EXT;
			$d2 = dirname($f2);
			if (!file_exists($d2)) mkdir($d2, 0777, true);
			echo "$f -> ";

			$parser = new Parser();
			try {
				write_file($f2, $parser->convert($f));
				if ($javascript) {
					system("coffee -c -b $f2");
				}
			}
			catch (Exception $e) {
				echo $e->getMessage();
			}
			echo "$f2\n";
			$i++;
		}
	}
	$s = ($i == 1) ? '':'s';
	echo "\n$i file$s converted.\n";

}

/**
 * copyto_filename
 *
 * @param string $filename
 * @param string $source
 * @param string $destination
 * @return string
 */
function copyto_filename($filename, $source, $destination) {
  
  if ($source == $destination) return $filename;
  $n = substr($filename, strlen($source));
  return $destination.$n;
}

/* End of file php2coffee.php */
/* Location: ./tools/php2coffee.php */
